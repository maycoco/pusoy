// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Msg {

  /// <summary>Holder for reflection information generated from msg.proto</summary>
  public static partial class MsgReflection {

    #region Descriptor
    /// <summary>File descriptor for msg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgltc2cucHJvdG8SA21zZyKeDwoIUHJvdG9jb2wSHQoFbXNnaWQYASABKA4y",
            "Di5tc2cuTWVzc2FnZUlEEh8KCGxvZ2luUmVxGAIgASgLMg0ubXNnLkxvZ2lu",
            "UmVxEh8KCGxvZ2luUnNwGAMgASgLMg0ubXNnLkxvZ2luUnNwEiMKCmtpY2tO",
            "b3RpZnkYBCABKAsyDy5tc2cuS2lja05vdGlmeRIpCg1jcmVhdGVSb29tUmVx",
            "GAUgASgLMhIubXNnLkNyZWF0ZVJvb21SZXESKQoNY3JlYXRlUm9vbVJzcBgG",
            "IAEoCzISLm1zZy5DcmVhdGVSb29tUnNwEjkKFWNvbnN1bWVEaWFtb25kc05v",
            "dGlmeRgHIAEoCzIaLm1zZy5Db25zdW1lRGlhbW9uZHNOb3RpZnkSJQoLam9p",
            "blJvb21SZXEYCCABKAsyEC5tc2cuSm9pblJvb21SZXESJQoLam9pblJvb21S",
            "c3AYCSABKAsyEC5tc2cuSm9pblJvb21Sc3ASKwoOam9pblJvb21Ob3RpZnkY",
            "CiABKAsyEy5tc2cuSm9pblJvb21Ob3RpZnkSJwoMbGVhdmVSb29tUmVxGAsg",
            "ASgLMhEubXNnLkxlYXZlUm9vbVJlcRInCgxsZWF2ZVJvb21Sc3AYDCABKAsy",
            "ES5tc2cuTGVhdmVSb29tUnNwEi0KD2xlYXZlUm9vbU5vdGlmeRgNIAEoCzIU",
            "Lm1zZy5MZWF2ZVJvb21Ob3RpZnkSIwoKc2l0RG93blJlcRgOIAEoCzIPLm1z",
            "Zy5TaXREb3duUmVxEiMKCnNpdERvd25Sc3AYDyABKAsyDy5tc2cuU2l0RG93",
            "blJzcBIpCg1zaXREb3duTm90aWZ5GBAgASgLMhIubXNnLlNpdERvd25Ob3Rp",
            "ZnkSIwoKc3RhbmRVcFJlcRgRIAEoCzIPLm1zZy5TdGFuZFVwUmVxEiMKCnN0",
            "YW5kVXBSc3AYEiABKAsyDy5tc2cuU3RhbmRVcFJzcBIpCg1zdGFuZFVwTm90",
            "aWZ5GBMgASgLMhIubXNnLlN0YW5kVXBOb3RpZnkSKQoNYXV0b0JhbmtlclJl",
            "cRgXIAEoCzISLm1zZy5BdXRvQmFua2VyUmVxEikKDWF1dG9CYW5rZXJSc3AY",
            "GCABKAsyEi5tc2cuQXV0b0JhbmtlclJzcBInCgxzdGFydEdhbWVSZXEYGSAB",
            "KAsyES5tc2cuU3RhcnRHYW1lUmVxEicKDHN0YXJ0R2FtZVJzcBgaIAEoCzIR",
            "Lm1zZy5TdGFydEdhbWVSc3ASGwoGYmV0UmVxGBsgASgLMgsubXNnLkJldFJl",
            "cRIbCgZiZXRSc3AYHCABKAsyCy5tc2cuQmV0UnNwEiEKCWJldE5vdGlmeRgd",
            "IAEoCzIOLm1zZy5CZXROb3RpZnkSIwoKY29tYmluZVJlcRgeIAEoCzIPLm1z",
            "Zy5Db21iaW5lUmVxEiMKCmNvbWJpbmVSc3AYHyABKAsyDy5tc2cuQ29tYmlu",
            "ZVJzcBIpCg1jb21iaW5lTm90aWZ5GCAgASgLMhIubXNnLkNvbWJpbmVOb3Rp",
            "ZnkSLQoPZ2FtZVN0YXRlTm90aWZ5GCIgASgLMhQubXNnLkdhbWVTdGF0ZU5v",
            "dGlmeRIvChBkaXNjb25uZWN0Tm90aWZ5GCMgASgLMhUubXNnLkRpc2Nvbm5l",
            "Y3ROb3RpZnkSLQoPcmVjb25uZWN0Tm90aWZ5GCQgASgLMhQubXNnLlJlY29u",
            "bmVjdE5vdGlmeRIvChBnZXRTY29yZWJvYXJkUmVxGCUgASgLMhUubXNnLkdl",
            "dFNjb3JlYm9hcmRSZXESLwoQZ2V0U2NvcmVib2FyZFJzcBgmIAEoCzIVLm1z",
            "Zy5HZXRTY29yZWJvYXJkUnNwEjMKEmdldFJvdW5kSGlzdG9yeVJlcRgnIAEo",
            "CzIXLm1zZy5HZXRSb3VuZEhpc3RvcnlSZXESMwoSZ2V0Um91bmRIaXN0b3J5",
            "UnNwGCggASgLMhcubXNnLkdldFJvdW5kSGlzdG9yeVJzcBInCgxsaXN0Um9v",
            "bXNSZXEYKSABKAsyES5tc2cuTGlzdFJvb21zUmVxEicKDGxpc3RSb29tc1Jz",
            "cBgqIAEoCzIRLm1zZy5MaXN0Um9vbXNSc3ASJwoMY2xvc2VSb29tUmVxGCsg",
            "ASgLMhEubXNnLkNsb3NlUm9vbVJlcRInCgxjbG9zZVJvb21Sc3AYLCABKAsy",
            "ES5tc2cuQ2xvc2VSb29tUnNwEikKDWdldFByb2ZpbGVSZXEYLSABKAsyEi5t",
            "c2cuR2V0UHJvZmlsZVJlcRIpCg1nZXRQcm9maWxlUnNwGC4gASgLMhIubXNn",
            "LkdldFByb2ZpbGVSc3ASMwoSZGlhbW9uZHNSZWNvcmRzUmVxGC8gASgLMhcu",
            "bXNnLkRpYW1vbmRzUmVjb3Jkc1JlcRIzChJkaWFtb25kc1JlY29yZHNSc3AY",
            "MCABKAsyFy5tc2cuRGlhbW9uZHNSZWNvcmRzUnNwEi0KD3NlbmREaWFtb25k",
            "c1JlcRgxIAEoCzIULm1zZy5TZW5kRGlhbW9uZHNSZXESLQoPc2VuZERpYW1v",
            "bmRzUnNwGDIgASgLMhQubXNnLlNlbmREaWFtb25kc1JzcCIqCgpMb2dpbkZC",
            "UmVxEg0KBWZiX2lkGAEgASgJEg0KBXRva2VuGAIgASgJIkUKCExvZ2luUmVx",
            "EhwKBHR5cGUYASABKA4yDi5tc2cuTG9naW5UeXBlEhsKAmZiGAIgASgLMg8u",
            "bXNnLkxvZ2luRkJSZXEiZQoITG9naW5Sc3ASGQoDcmV0GAEgASgOMgwubXNn",
            "LkVycm9ySUQSCwoDdWlkGAIgASgNEgwKBG5hbWUYAyABKAkSDgoGYXZhdGFy",
            "GAQgASgJEhMKC3Jvb21fbnVtYmVyGAUgASgJIg8KDUdldFByb2ZpbGVSZXEi",
            "eQoNR2V0UHJvZmlsZVJzcBIZCgNyZXQYASABKA4yDC5tc2cuRXJyb3JJRBIL",
            "CgN1aWQYAiABKA0SDAoEbmFtZRgDIAEoCRIQCghzaWdudHVyZRgEIAEoCRIO",
            "CgZhdmF0YXIYBSABKAkSEAoIZGlhbW9uZHMYBiABKA0iOgoSRGlhbW9uZHNS",
            "ZWNvcmRzUmVxEhIKCmJlZ2luX3RpbWUYASABKAkSEAoIZW5kX3RpbWUYAiAB",
            "KAkifgoSRGlhbW9uZHNSZWNvcmRzUnNwEhkKA3JldBgBIAEoDjIMLm1zZy5F",
            "cnJvcklEEikKB3JlY29yZHMYAiADKAsyGC5tc2cuRGlhbW9uZHNSZWNvcmRz",
            "SXRlbRIiCgV1c2VycxgDIAMoCzITLm1zZy5Vc2VyTmFtZUF2YXRhciJCChNE",
            "aWFtb25kc1JlY29yZHNJdGVtEgwKBHRpbWUYASABKA0SCwoDdWlkGAIgASgN",
            "EhAKCGRpYW1vbmRzGAMgASgFIjsKDlVzZXJOYW1lQXZhdGFyEgsKA3VpZBgB",
            "IAEoDRIMCgRuYW1lGAIgASgJEg4KBmF2YXRhchgDIAEoCSIwCg9TZW5kRGlh",
            "bW9uZHNSZXESCwoDdWlkGAEgASgNEhAKCGRpYW1vbmRzGAIgASgNIiwKD1Nl",
            "bmREaWFtb25kc1JzcBIZCgNyZXQYASABKA4yDC5tc2cuRXJyb3JJRCIMCgpL",
            "aWNrTm90aWZ5Ih8KEERpc2Nvbm5lY3ROb3RpZnkSCwoDdWlkGAEgASgNIh4K",
            "D1JlY29ubmVjdE5vdGlmeRILCgN1aWQYASABKA0idwoNQ3JlYXRlUm9vbVJl",
            "cRIMCgRuYW1lGAEgASgJEg8KB21pbl9iZXQYAiABKA0SDwoHbWF4X2JldBgD",
            "IAEoDRINCgVoYW5kcxgEIAEoDRIVCg1jcmVkaXRfcG9pbnRzGAUgASgNEhAK",
            "CGlzX3NoYXJlGAYgASgIIlAKDUNyZWF0ZVJvb21Sc3ASGQoDcmV0GAEgASgO",
            "MgwubXNnLkVycm9ySUQSDwoHcm9vbV9pZBgCIAEoDRITCgtyb29tX251bWJl",
            "chgDIAEoCSIOCgxMaXN0Um9vbXNSZXEiSwoMTGlzdFJvb21zUnNwEhkKA3Jl",
            "dBgBIAEoDjIMLm1zZy5FcnJvcklEEiAKBXJvb21zGAIgAygLMhEubXNnLkxp",
            "c3RSb29tSXRlbSKpAQoMTGlzdFJvb21JdGVtEg8KB3Jvb21faWQYASABKA0S",
            "EwoLcm9vbV9udW1iZXIYAiABKAkSEQoJcm9vbV9uYW1lGAMgASgJEhEKCW93",
            "bmVyX3VpZBgEIAEoDRINCgVoYW5kcxgFIAEoDRIUCgxwbGF5ZWRfaGFuZHMY",
            "BiABKA0SKAoHcGxheWVycxgHIAMoCzIXLm1zZy5MaXN0Um9vbVBsYXllcklu",
            "Zm8iQwoSTGlzdFJvb21QbGF5ZXJJbmZvEg8KB3NlYXRfaWQYASABKA0SDAoE",
            "bmFtZRgCIAEoCRIOCgZhdmF0YXIYAyABKAkiHwoMQ2xvc2VSb29tUmVxEg8K",
            "B3Jvb21faWQYASABKA0iOgoMQ2xvc2VSb29tUnNwEhkKA3JldBgBIAEoDjIM",
            "Lm1zZy5FcnJvcklEEg8KB3Jvb21faWQYAiABKA0iKQoVQ29uc3VtZURpYW1v",
            "bmRzTm90aWZ5EhAKCGRpYW1vbmRzGAEgASgNImAKBlBsYXllchILCgN1aWQY",
            "ASABKA0SDAoEbmFtZRgCIAEoCRIOCgZhdmF0YXIYAyABKAkSDwoHc2VhdF9p",
            "ZBgEIAEoBRILCgNiZXQYBSABKA0SDQoFc2NvcmUYBiABKAUipQIKBFJvb20S",
            "DwoHcm9vbV9pZBgBIAEoDRIOCgZudW1iZXIYAiABKAkSDAoEbmFtZRgDIAEo",
            "CRIPCgdtaW5fYmV0GAQgASgNEg8KB21heF9iZXQYBSABKA0SDQoFaGFuZHMY",
            "BiABKA0SFAoMcGxheWVkX2hhbmRzGAcgASgNEhUKDWNyZWRpdF9wb2ludHMY",
            "CCABKA0SEAoIaXNfc2hhcmUYCSABKAgSHAoHcGxheWVycxgKIAMoCzILLm1z",
            "Zy5QbGF5ZXISHQoFc3RhdGUYCyABKA4yDi5tc2cuR2FtZVN0YXRlEhEKCWNv",
            "dW50ZG93bhgMIAEoBRINCgVjYXJkcxgNIAMoDRIfCgZyZXN1bHQYDiADKAsy",
            "Dy5tc2cuU2VhdFJlc3VsdCIiCgtKb2luUm9vbVJlcRITCgtyb29tX251bWJl",
            "chgBIAEoCSJBCgtKb2luUm9vbVJzcBIZCgNyZXQYASABKA4yDC5tc2cuRXJy",
            "b3JJRBIXCgRyb29tGAIgASgLMgkubXNnLlJvb20iOwoOSm9pblJvb21Ob3Rp",
            "ZnkSCwoDdWlkGAEgASgNEgwKBG5hbWUYAiABKAkSDgoGYXZhdGFyGAMgASgJ",
            "Ig4KDExlYXZlUm9vbVJlcSIpCgxMZWF2ZVJvb21Sc3ASGQoDcmV0GAEgASgO",
            "MgwubXNnLkVycm9ySUQiHgoPTGVhdmVSb29tTm90aWZ5EgsKA3VpZBgBIAEo",
            "DSIdCgpTaXREb3duUmVxEg8KB3NlYXRfaWQYASABKA0iOwoKU2l0RG93blJz",
            "cBIZCgNyZXQYASABKA4yDC5tc2cuRXJyb3JJRBISCgphdXRvYmFua2VyGAIg",
            "ASgIInEKDVNpdERvd25Ob3RpZnkSHgoEdHlwZRgBIAEoDjIQLm1zZy5TaXRE",
            "b3duVHlwZRILCgN1aWQYAiABKA0SDwoHc2VhdF9pZBgDIAEoDRITCgtvbGRf",
            "c2VhdF9pZBgEIAEoBRINCgVzY29yZRgFIAEoBSIMCgpTdGFuZFVwUmVxIicK",
            "ClN0YW5kVXBSc3ASGQoDcmV0GAEgASgOMgwubXNnLkVycm9ySUQiLQoNU3Rh",
            "bmRVcE5vdGlmeRILCgN1aWQYASABKA0SDwoHc2VhdF9pZBgCIAEoDSIkCg1B",
            "dXRvQmFua2VyUmVxEhMKC2F1dG9fYmFua2VyGAEgASgIIioKDUF1dG9CYW5r",
            "ZXJSc3ASGQoDcmV0GAEgASgOMgwubXNnLkVycm9ySUQiDgoMU3RhcnRHYW1l",
            "UmVxIikKDFN0YXJ0R2FtZVJzcBIZCgNyZXQYASABKA4yDC5tc2cuRXJyb3JJ",
            "RCIXCgZCZXRSZXESDQoFY2hpcHMYASABKA0iIwoGQmV0UnNwEhkKA3JldBgB",
            "IAEoDjIMLm1zZy5FcnJvcklEIisKCUJldE5vdGlmeRIPCgdzZWF0X2lkGAEg",
            "ASgNEg0KBWNoaXBzGAIgASgNIhoKCUNhcmRHcm91cBINCgVjYXJkcxgBIAMo",
            "DSJCCgpDb21iaW5lUmVxEiMKC2NhcmRfZ3JvdXBzGAEgAygLMg4ubXNnLkNh",
            "cmRHcm91cBIPCgdhdXRvd2luGAIgASgIIicKCkNvbWJpbmVSc3ASGQoDcmV0",
            "GAEgASgOMgwubXNnLkVycm9ySUQiIAoNQ29tYmluZU5vdGlmeRIPCgdzZWF0",
            "X2lkGAEgASgNIssBCgpTZWF0UmVzdWx0Eg8KB3NlYXRfaWQYASABKA0SIwoL",
            "Y2FyZF9ncm91cHMYAiADKAsyDi5tc2cuQ2FyZEdyb3VwEg8KB2F1dG93aW4Y",
            "AyABKAgSDAoEZm91bBgEIAEoCBIcCgVyYW5rcxgFIAMoDjINLm1zZy5DYXJk",
            "UmFuaxIOCgZzY29yZXMYBiADKAUSEwoLdG90YWxfc2NvcmUYByABKAUSCwoD",
            "d2luGAggASgFEgsKA2JldBgJIAEoDRILCgN1aWQYCiABKA0iLQoJREJSZXN1",
            "bHRzEiAKB3Jlc3VsdHMYASADKAsyDy5tc2cuU2VhdFJlc3VsdCJgChJQbGF5",
            "ZXJSb3VuZEhpc3RvcnkSCwoDdWlkGAEgASgNEgwKBG5hbWUYAiABKAkSDgoG",
            "YXZhdGFyGAMgASgJEh8KBnJlc3VsdBgEIAEoCzIPLm1zZy5TZWF0UmVzdWx0",
            "IiMKEkdldFJvdW5kSGlzdG9yeVJlcRINCgVyb3VuZBgBIAEoDSJZChJHZXRS",
            "b3VuZEhpc3RvcnlSc3ASGQoDcmV0GAEgASgOMgwubXNnLkVycm9ySUQSKAoH",
            "cmVzdWx0cxgCIAMoCzIXLm1zZy5QbGF5ZXJSb3VuZEhpc3RvcnkijAEKD0dh",
            "bWVTdGF0ZU5vdGlmeRIdCgVzdGF0ZRgBIAEoDjIOLm1zZy5HYW1lU3RhdGUS",
            "EQoJY291bnRkb3duGAIgASgNEhIKCmRlYWxfY2FyZHMYAyADKA0SEgoKZGVh",
            "bF9zZWF0cxgEIAMoDRIfCgZyZXN1bHQYBSADKAsyDy5tc2cuU2VhdFJlc3Vs",
            "dCIfChBHZXRTY29yZWJvYXJkUmVxEgsKA3BvcxgBIAEoDSJKCg5TY29yZWJv",
            "YXJkSXRlbRILCgN1aWQYASABKA0SDAoEbmFtZRgCIAEoCRIOCgZhdmF0YXIY",
            "AyABKAkSDQoFc2NvcmUYBCABKAUiYAoQR2V0U2NvcmVib2FyZFJzcBIZCgNy",
            "ZXQYASABKA4yDC5tc2cuRXJyb3JJRBINCgV0b3RhbBgCIAEoDRIiCgVpdGVt",
            "cxgDIAMoCzITLm1zZy5TY29yZWJvYXJkSXRlbSqVBwoJTWVzc2FnZUlEEg0K",
            "CUxvZ2luX1JlcRAAEg0KCUxvZ2luX1JzcBABEg8KC0tpY2tfTm90aWZ5EAIS",
            "EgoOQ3JlYXRlUm9vbV9SZXEQAxISCg5DcmVhdGVSb29tX1JzcBAEEhoKFkNv",
            "bnN1bWVEaWFtb25kc19Ob3RpZnkQBRIQCgxKb2luUm9vbV9SZXEQBhIQCgxK",
            "b2luUm9vbV9Sc3AQBxITCg9Kb2luUm9vbV9Ob3RpZnkQCBIRCg1MZWF2ZVJv",
            "b21fUmVxEAkSEQoNTGVhdmVSb29tX1JzcBAKEhQKEExlYXZlUm9vbV9Ob3Rp",
            "ZnkQCxIPCgtTaXREb3duX1JlcRAMEg8KC1NpdERvd25fUnNwEA0SEgoOU2l0",
            "RG93bl9Ob3RpZnkQDhIPCgtTdGFuZFVwX1JlcRAPEg8KC1N0YW5kVXBfUnNw",
            "EBASEgoOU3RhbmRVcF9Ob3RpZnkQERISCg5BdXRvQmFua2VyX1JlcRAVEhIK",
            "DkF1dG9CYW5rZXJfUnNwEBYSEQoNU3RhcnRHYW1lX1JlcRAXEhEKDVN0YXJ0",
            "R2FtZV9Sc3AQGBILCgdCZXRfUmVxEBkSCwoHQmV0X1JzcBAaEg4KCkJldF9O",
            "b3RpZnkQGxIPCgtDb21iaW5lX1JlcRAcEg8KC0NvbWJpbmVfUnNwEB0SEgoO",
            "Q29tYmluZV9Ob3RpZnkQHhIRCg1SZXN1bHRfTm90aWZ5EB8SFAoQR2FtZVN0",
            "YXRlX05vdGlmeRAgEhUKEURpc2Nvbm5lY3RfTm90aWZ5ECESFAoQUmVjb25u",
            "ZWN0X05vdGlmeRAiEhUKEUdldFNjb3JlYm9hcmRfUmVxECMSFQoRR2V0U2Nv",
            "cmVib2FyZF9Sc3AQJBIXChNHZXRSb3VuZEhpc3RvcnlfUmVxECUSFwoTR2V0",
            "Um91bmRIaXN0b3J5X1JzcBAmEhEKDUxpc3RSb29tc19SZXEQJxIRCg1MaXN0",
            "Um9vbXNfUnNwECgSEQoNQ2xvc2VSb29tX1JlcRApEhEKDUNsb3NlUm9vbV9S",
            "c3AQKhISCg5HZXRQcm9maWxlX1JlcRArEhIKDkdldFByb2ZpbGVfUnNwECwS",
            "FwoTRGlhbW9uZHNSZWNvcmRzX1JlcRAtEhcKE0RpYW1vbmRzUmVjb3Jkc19S",
            "c3AQLhIUChBTZW5kRGlhbW9uZHNfUmVxEC8SFAoQU2VuZERpYW1vbmRzX1Jz",
            "cBAwKpEJCgdFcnJvcklEEgYKAk9rEAASEgoOSW52YWxpZF9QYXJhbXMQARIM",
            "CghEQl9FcnJvchACEhIKDkludGVybmFsX0Vycm9yEAMSGQoVTG9naW5fRmFj",
            "ZWJvb2tfRmFpbGVkEAQSIAocQ3JlYXRlUm9vbV9JbnZhbGlkX1Jvb21fTmFt",
            "ZRBkEiIKHkNyZWF0ZVJvb21fSW52YWxpZF9NaW5fTWF4X0JldBBlEiQKIENy",
            "ZWF0ZVJvb21fSW52YWxpZF9DcmVkaXRfUG9pbnRzEGYSIgoeQ3JlYXRlUm9v",
            "bV9Ob3RfRW5vdWdoX0RpYW1vbmRzEGcSJgoiQ3JlYXRlUm9vbV9FeGNlZWRf",
            "TGltaXRhdGlvbl9Sb29tcxBoEhwKGENyZWF0ZVJvb21fSW52YWxpZF9IYW5k",
            "cxBpEh4KGkpvaW5Sb29tX1dyb25nX1Jvb21fTnVtYmVyEG4SEQoNSm9pblJv",
            "b21fRnVsbBBvEhcKE0pvaW5Sb29tX0FscmVhZHlfSW4QcBITCg9Kb2luUm9v",
            "bV9DbG9zZWQQcRIUChBMZWF2ZVJvb21fTm90X0luEHgSFQoRTGVhdmVSb29t",
            "X1BsYXlpbmcQeRIcChdTaXREb3duX0ludmFsaWRfU2VhdF9JZBCCARIhChxT",
            "aXREb3duX0FscmVhZHlfRXhpc3RfUGxheWVyEIMBEhgKE1NpdERvd25fQWxy",
            "ZWFkeV9TaXQQhAESFAoPU3RhbmRVcF9Ob3RfU2l0EIwBEhwKF1N0YW5kVXBf",
            "Q2Fubm90X1N0YW5kX1VwEI0BEhoKFUF1dG9CYW5rZXJfTm90X0JhbmtlchCW",
            "ARIdChhBdXRvQmFua2VyX0ludmFsaWRfU3RhdGUQlwESGQoUU3RhcnRHYW1l",
            "X05vdF9CYW5rZXIQoAESIQocU3RhcnRHYW1lX05vdF9Fbm91Z2hfUGxheWVy",
            "cxChARIiCh1TdGFydEdhbWVfTm90X0Vub3VnaF9EaWFtb25kcxCiARIeChlT",
            "dGFydEdhbWVfTm90X1JlYWR5X1N0YXRlEKMBEhYKEUJldF9Ob3RfQmV0X1N0",
            "YXRlEKoBEhoKFUJldF9CYW5rZXJfQ2Fubm90X0JldBCrARIWChFCZXRfSW52",
            "YWxpZF9DaGlwcxCsARIdChhCZXRfTm90X0FfUGxheWVyX09uX1NlYXQQrQES",
            "FAoPQmV0X0FscmVhZHlfQmV0EK4BEh4KGUNvbWJpbmVfTm90X0NvbWJpbmVf",
            "U3RhdGUQtAESHgoZQ29tYmluZV9Ob3RfSW5fVGhpc19Sb3VuZBC1ARIhChxD",
            "b21iaW5lX0ludmFsaWRfUmVxdWVzdF9EYXRhELYBEhkKFENvbWJpbmVfQWxy",
            "ZWFkeV9Eb25lELcBEhYKEUNvbWJpbmVfTm90X0x1Y2t5ELgBEiMKHkdldFNj",
            "b3JlYm9hcmRfUG9zX0V4Y2VlZF9SYW5nZRC+ARIkCh9HZXRSb3VuZEhpc3Rv",
            "cnlfUm91bmRfTm90X0V4aXN0EMgBEhsKFkNsb3NlUm9vbV9DYW5ub3RfQ2xv",
            "c2UQ0gEqGQoJTG9naW5UeXBlEgwKCEZhY2Vib29rEAAqIAoLU2l0RG93blR5",
            "cGUSBwoDU2l0EAASCAoEU3dhcBABKmwKCUdhbWVTdGF0ZRIJCgVSZWFkeRAA",
            "EgcKA0JldBABEg8KC0NvbmZpcm1fQmV0EAISCAoERGVhbBADEgsKB0NvbWJp",
            "bmUQBBIICgRTaG93EAUSCgoGUmVzdWx0EAYSDQoJQ2xvc2VSb29tEAcqmwEK",
            "CENhcmRSYW5rEg0KCUhpZ2hfQ2FyZBAAEgwKCE9uZV9QYWlyEAESDAoIVHdv",
            "X1BhaXIQAhITCg9UaHJlZV9PZl9BX0tpbmQQAxIMCghTdHJhaWdodBAEEgkK",
            "BUZsdXNoEAUSDgoKRnVsbF9Ib3VzZRAGEhIKDkZvdXJfT2ZfQV9LaW5kEAcS",
            "EgoOU3RyYWlnaHRfRmx1c2gQCCpLCg1DYXJkQ29sb3JTdWl0EgkKBUNsdWJz",
            "EAASCgoGU3BhZGVzEAESCgoGSGVhcnRzEAISDAoIRGlhbW9uZHMQAxIJCgVD",
            "b3VudBAEYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Msg.MessageID), typeof(global::Msg.ErrorID), typeof(global::Msg.LoginType), typeof(global::Msg.SitDownType), typeof(global::Msg.GameState), typeof(global::Msg.CardRank), typeof(global::Msg.CardColorSuit), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Protocol), global::Msg.Protocol.Parser, new[]{ "Msgid", "LoginReq", "LoginRsp", "KickNotify", "CreateRoomReq", "CreateRoomRsp", "ConsumeDiamondsNotify", "JoinRoomReq", "JoinRoomRsp", "JoinRoomNotify", "LeaveRoomReq", "LeaveRoomRsp", "LeaveRoomNotify", "SitDownReq", "SitDownRsp", "SitDownNotify", "StandUpReq", "StandUpRsp", "StandUpNotify", "AutoBankerReq", "AutoBankerRsp", "StartGameReq", "StartGameRsp", "BetReq", "BetRsp", "BetNotify", "CombineReq", "CombineRsp", "CombineNotify", "GameStateNotify", "DisconnectNotify", "ReconnectNotify", "GetScoreboardReq", "GetScoreboardRsp", "GetRoundHistoryReq", "GetRoundHistoryRsp", "ListRoomsReq", "ListRoomsRsp", "CloseRoomReq", "CloseRoomRsp", "GetProfileReq", "GetProfileRsp", "DiamondsRecordsReq", "DiamondsRecordsRsp", "SendDiamondsReq", "SendDiamondsRsp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.LoginFBReq), global::Msg.LoginFBReq.Parser, new[]{ "FbId", "Token" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.LoginReq), global::Msg.LoginReq.Parser, new[]{ "Type", "Fb" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.LoginRsp), global::Msg.LoginRsp.Parser, new[]{ "Ret", "Uid", "Name", "Avatar", "RoomNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.GetProfileReq), global::Msg.GetProfileReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.GetProfileRsp), global::Msg.GetProfileRsp.Parser, new[]{ "Ret", "Uid", "Name", "Signture", "Avatar", "Diamonds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.DiamondsRecordsReq), global::Msg.DiamondsRecordsReq.Parser, new[]{ "BeginTime", "EndTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.DiamondsRecordsRsp), global::Msg.DiamondsRecordsRsp.Parser, new[]{ "Ret", "Records", "Users" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.DiamondsRecordsItem), global::Msg.DiamondsRecordsItem.Parser, new[]{ "Time", "Uid", "Diamonds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.UserNameAvatar), global::Msg.UserNameAvatar.Parser, new[]{ "Uid", "Name", "Avatar" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SendDiamondsReq), global::Msg.SendDiamondsReq.Parser, new[]{ "Uid", "Diamonds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SendDiamondsRsp), global::Msg.SendDiamondsRsp.Parser, new[]{ "Ret" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.KickNotify), global::Msg.KickNotify.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.DisconnectNotify), global::Msg.DisconnectNotify.Parser, new[]{ "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.ReconnectNotify), global::Msg.ReconnectNotify.Parser, new[]{ "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.CreateRoomReq), global::Msg.CreateRoomReq.Parser, new[]{ "Name", "MinBet", "MaxBet", "Hands", "CreditPoints", "IsShare" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.CreateRoomRsp), global::Msg.CreateRoomRsp.Parser, new[]{ "Ret", "RoomId", "RoomNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.ListRoomsReq), global::Msg.ListRoomsReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.ListRoomsRsp), global::Msg.ListRoomsRsp.Parser, new[]{ "Ret", "Rooms" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.ListRoomItem), global::Msg.ListRoomItem.Parser, new[]{ "RoomId", "RoomNumber", "RoomName", "OwnerUid", "Hands", "PlayedHands", "Players" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.ListRoomPlayerInfo), global::Msg.ListRoomPlayerInfo.Parser, new[]{ "SeatId", "Name", "Avatar" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.CloseRoomReq), global::Msg.CloseRoomReq.Parser, new[]{ "RoomId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.CloseRoomRsp), global::Msg.CloseRoomRsp.Parser, new[]{ "Ret", "RoomId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.ConsumeDiamondsNotify), global::Msg.ConsumeDiamondsNotify.Parser, new[]{ "Diamonds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Player), global::Msg.Player.Parser, new[]{ "Uid", "Name", "Avatar", "SeatId", "Bet", "Score" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Room), global::Msg.Room.Parser, new[]{ "RoomId", "Number", "Name", "MinBet", "MaxBet", "Hands", "PlayedHands", "CreditPoints", "IsShare", "Players", "State", "Countdown", "Cards", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.JoinRoomReq), global::Msg.JoinRoomReq.Parser, new[]{ "RoomNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.JoinRoomRsp), global::Msg.JoinRoomRsp.Parser, new[]{ "Ret", "Room" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.JoinRoomNotify), global::Msg.JoinRoomNotify.Parser, new[]{ "Uid", "Name", "Avatar" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.LeaveRoomReq), global::Msg.LeaveRoomReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.LeaveRoomRsp), global::Msg.LeaveRoomRsp.Parser, new[]{ "Ret" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.LeaveRoomNotify), global::Msg.LeaveRoomNotify.Parser, new[]{ "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SitDownReq), global::Msg.SitDownReq.Parser, new[]{ "SeatId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SitDownRsp), global::Msg.SitDownRsp.Parser, new[]{ "Ret", "Autobanker" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SitDownNotify), global::Msg.SitDownNotify.Parser, new[]{ "Type", "Uid", "SeatId", "OldSeatId", "Score" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.StandUpReq), global::Msg.StandUpReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.StandUpRsp), global::Msg.StandUpRsp.Parser, new[]{ "Ret" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.StandUpNotify), global::Msg.StandUpNotify.Parser, new[]{ "Uid", "SeatId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.AutoBankerReq), global::Msg.AutoBankerReq.Parser, new[]{ "AutoBanker" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.AutoBankerRsp), global::Msg.AutoBankerRsp.Parser, new[]{ "Ret" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.StartGameReq), global::Msg.StartGameReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.StartGameRsp), global::Msg.StartGameRsp.Parser, new[]{ "Ret" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.BetReq), global::Msg.BetReq.Parser, new[]{ "Chips" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.BetRsp), global::Msg.BetRsp.Parser, new[]{ "Ret" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.BetNotify), global::Msg.BetNotify.Parser, new[]{ "SeatId", "Chips" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.CardGroup), global::Msg.CardGroup.Parser, new[]{ "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.CombineReq), global::Msg.CombineReq.Parser, new[]{ "CardGroups", "Autowin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.CombineRsp), global::Msg.CombineRsp.Parser, new[]{ "Ret" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.CombineNotify), global::Msg.CombineNotify.Parser, new[]{ "SeatId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SeatResult), global::Msg.SeatResult.Parser, new[]{ "SeatId", "CardGroups", "Autowin", "Foul", "Ranks", "Scores", "TotalScore", "Win", "Bet", "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.DBResults), global::Msg.DBResults.Parser, new[]{ "Results" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.PlayerRoundHistory), global::Msg.PlayerRoundHistory.Parser, new[]{ "Uid", "Name", "Avatar", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.GetRoundHistoryReq), global::Msg.GetRoundHistoryReq.Parser, new[]{ "Round" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.GetRoundHistoryRsp), global::Msg.GetRoundHistoryRsp.Parser, new[]{ "Ret", "Results" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.GameStateNotify), global::Msg.GameStateNotify.Parser, new[]{ "State", "Countdown", "DealCards", "DealSeats", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.GetScoreboardReq), global::Msg.GetScoreboardReq.Parser, new[]{ "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.ScoreboardItem), global::Msg.ScoreboardItem.Parser, new[]{ "Uid", "Name", "Avatar", "Score" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.GetScoreboardRsp), global::Msg.GetScoreboardRsp.Parser, new[]{ "Ret", "Total", "Items" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MessageID {
    /// <summary>
    /// login
    /// </summary>
    [pbr::OriginalName("Login_Req")] LoginReq = 0,
    [pbr::OriginalName("Login_Rsp")] LoginRsp = 1,
    /// <summary>
    /// 被踢，相同账号同时登录
    /// </summary>
    [pbr::OriginalName("Kick_Notify")] KickNotify = 2,
    /// <summary>
    /// 创建房间
    /// </summary>
    [pbr::OriginalName("CreateRoom_Req")] CreateRoomReq = 3,
    [pbr::OriginalName("CreateRoom_Rsp")] CreateRoomRsp = 4,
    /// <summary>
    /// 扣除钻石
    /// </summary>
    [pbr::OriginalName("ConsumeDiamonds_Notify")] ConsumeDiamondsNotify = 5,
    /// <summary>
    /// 加入房间
    /// </summary>
    [pbr::OriginalName("JoinRoom_Req")] JoinRoomReq = 6,
    [pbr::OriginalName("JoinRoom_Rsp")] JoinRoomRsp = 7,
    [pbr::OriginalName("JoinRoom_Notify")] JoinRoomNotify = 8,
    /// <summary>
    /// 离开房间
    /// </summary>
    [pbr::OriginalName("LeaveRoom_Req")] LeaveRoomReq = 9,
    [pbr::OriginalName("LeaveRoom_Rsp")] LeaveRoomRsp = 10,
    [pbr::OriginalName("LeaveRoom_Notify")] LeaveRoomNotify = 11,
    /// <summary>
    /// 坐下
    /// </summary>
    [pbr::OriginalName("SitDown_Req")] SitDownReq = 12,
    [pbr::OriginalName("SitDown_Rsp")] SitDownRsp = 13,
    [pbr::OriginalName("SitDown_Notify")] SitDownNotify = 14,
    /// <summary>
    /// 站起
    /// </summary>
    [pbr::OriginalName("StandUp_Req")] StandUpReq = 15,
    [pbr::OriginalName("StandUp_Rsp")] StandUpRsp = 16,
    [pbr::OriginalName("StandUp_Notify")] StandUpNotify = 17,
    /// <summary>
    /// 自动连庄
    /// </summary>
    [pbr::OriginalName("AutoBanker_Req")] AutoBankerReq = 21,
    [pbr::OriginalName("AutoBanker_Rsp")] AutoBankerRsp = 22,
    /// <summary>
    /// 开始游戏
    /// </summary>
    [pbr::OriginalName("StartGame_Req")] StartGameReq = 23,
    [pbr::OriginalName("StartGame_Rsp")] StartGameRsp = 24,
    /// <summary>
    /// 下注
    /// </summary>
    [pbr::OriginalName("Bet_Req")] BetReq = 25,
    [pbr::OriginalName("Bet_Rsp")] BetRsp = 26,
    [pbr::OriginalName("Bet_Notify")] BetNotify = 27,
    /// <summary>
    /// 组牌
    /// </summary>
    [pbr::OriginalName("Combine_Req")] CombineReq = 28,
    [pbr::OriginalName("Combine_Rsp")] CombineRsp = 29,
    [pbr::OriginalName("Combine_Notify")] CombineNotify = 30,
    [pbr::OriginalName("Result_Notify")] ResultNotify = 31,
    /// <summary>
    /// 游戏状态
    /// </summary>
    [pbr::OriginalName("GameState_Notify")] GameStateNotify = 32,
    /// <summary>
    /// 断线
    /// </summary>
    [pbr::OriginalName("Disconnect_Notify")] DisconnectNotify = 33,
    /// <summary>
    /// 重连
    /// </summary>
    [pbr::OriginalName("Reconnect_Notify")] ReconnectNotify = 34,
    /// <summary>
    /// 积分榜
    /// </summary>
    [pbr::OriginalName("GetScoreboard_Req")] GetScoreboardReq = 35,
    [pbr::OriginalName("GetScoreboard_Rsp")] GetScoreboardRsp = 36,
    /// <summary>
    /// 牌局回顾
    /// </summary>
    [pbr::OriginalName("GetRoundHistory_Req")] GetRoundHistoryReq = 37,
    [pbr::OriginalName("GetRoundHistory_Rsp")] GetRoundHistoryRsp = 38,
    /// <summary>
    /// 房间列表
    /// </summary>
    [pbr::OriginalName("ListRooms_Req")] ListRoomsReq = 39,
    [pbr::OriginalName("ListRooms_Rsp")] ListRoomsRsp = 40,
    [pbr::OriginalName("CloseRoom_Req")] CloseRoomReq = 41,
    [pbr::OriginalName("CloseRoom_Rsp")] CloseRoomRsp = 42,
    [pbr::OriginalName("GetProfile_Req")] GetProfileReq = 43,
    [pbr::OriginalName("GetProfile_Rsp")] GetProfileRsp = 44,
    [pbr::OriginalName("DiamondsRecords_Req")] DiamondsRecordsReq = 45,
    [pbr::OriginalName("DiamondsRecords_Rsp")] DiamondsRecordsRsp = 46,
    [pbr::OriginalName("SendDiamonds_Req")] SendDiamondsReq = 47,
    [pbr::OriginalName("SendDiamonds_Rsp")] SendDiamondsRsp = 48,
  }

  public enum ErrorID {
    /// <summary>
    /// success
    /// </summary>
    [pbr::OriginalName("Ok")] Ok = 0,
    /// <summary>
    /// invalid params
    /// </summary>
    [pbr::OriginalName("Invalid_Params")] InvalidParams = 1,
    /// <summary>
    /// db error
    /// </summary>
    [pbr::OriginalName("DB_Error")] DbError = 2,
    /// <summary>
    /// 内部错误
    /// </summary>
    [pbr::OriginalName("Internal_Error")] InternalError = 3,
    /// <summary>
    /// facebook登录失败
    /// </summary>
    [pbr::OriginalName("Login_Facebook_Failed")] LoginFacebookFailed = 4,
    /// <summary>
    /// 非法的房间名称
    /// </summary>
    [pbr::OriginalName("CreateRoom_Invalid_Room_Name")] CreateRoomInvalidRoomName = 100,
    /// <summary>
    /// 非法的最小最大下注设置
    /// </summary>
    [pbr::OriginalName("CreateRoom_Invalid_Min_Max_Bet")] CreateRoomInvalidMinMaxBet = 101,
    /// <summary>
    /// 非法的credit points
    /// </summary>
    [pbr::OriginalName("CreateRoom_Invalid_Credit_Points")] CreateRoomInvalidCreditPoints = 102,
    /// <summary>
    /// 开房钻石不够
    /// </summary>
    [pbr::OriginalName("CreateRoom_Not_Enough_Diamonds")] CreateRoomNotEnoughDiamonds = 103,
    /// <summary>
    /// 超出房间总数上限
    /// </summary>
    [pbr::OriginalName("CreateRoom_Exceed_Limitation_Rooms")] CreateRoomExceedLimitationRooms = 104,
    /// <summary>
    /// 非法的hands
    /// </summary>
    [pbr::OriginalName("CreateRoom_Invalid_Hands")] CreateRoomInvalidHands = 105,
    /// <summary>
    /// 错误的房号或者房间已关闭
    /// </summary>
    [pbr::OriginalName("JoinRoom_Wrong_Room_Number")] JoinRoomWrongRoomNumber = 110,
    /// <summary>
    /// 已满
    /// </summary>
    [pbr::OriginalName("JoinRoom_Full")] JoinRoomFull = 111,
    /// <summary>
    /// 已经在房间
    /// </summary>
    [pbr::OriginalName("JoinRoom_Already_In")] JoinRoomAlreadyIn = 112,
    /// <summary>
    /// 房间已关闭
    /// </summary>
    [pbr::OriginalName("JoinRoom_Closed")] JoinRoomClosed = 113,
    /// <summary>
    ///没有在房间中
    /// </summary>
    [pbr::OriginalName("LeaveRoom_Not_In")] LeaveRoomNotIn = 120,
    /// <summary>
    /// 游戏中
    /// </summary>
    [pbr::OriginalName("LeaveRoom_Playing")] LeaveRoomPlaying = 121,
    /// <summary>
    /// 没有此座位
    /// </summary>
    [pbr::OriginalName("SitDown_Invalid_Seat_Id")] SitDownInvalidSeatId = 130,
    /// <summary>
    /// 已经坐人了
    /// </summary>
    [pbr::OriginalName("SitDown_Already_Exist_Player")] SitDownAlreadyExistPlayer = 131,
    /// <summary>
    /// 已经坐在此座位上了
    /// </summary>
    [pbr::OriginalName("SitDown_Already_Sit")] SitDownAlreadySit = 132,
    /// <summary>
    /// 没有坐在座位上
    /// </summary>
    [pbr::OriginalName("StandUp_Not_Sit")] StandUpNotSit = 140,
    /// <summary>
    /// 当前状态不能站起
    /// </summary>
    [pbr::OriginalName("StandUp_Cannot_Stand_Up")] StandUpCannotStandUp = 141,
    /// <summary>
    /// 只有庄家才能设置
    /// </summary>
    [pbr::OriginalName("AutoBanker_Not_Banker")] AutoBankerNotBanker = 150,
    /// <summary>
    /// 非法的状态
    /// </summary>
    [pbr::OriginalName("AutoBanker_Invalid_State")] AutoBankerInvalidState = 151,
    /// <summary>
    /// 只有庄家才能开始
    /// </summary>
    [pbr::OriginalName("StartGame_Not_Banker")] StartGameNotBanker = 160,
    /// <summary>
    /// 人数不够
    /// </summary>
    [pbr::OriginalName("StartGame_Not_Enough_Players")] StartGameNotEnoughPlayers = 161,
    /// <summary>
    /// 钻石不够
    /// </summary>
    [pbr::OriginalName("StartGame_Not_Enough_Diamonds")] StartGameNotEnoughDiamonds = 162,
    /// <summary>
    /// 不是准备阶段，不能开始游戏
    /// </summary>
    [pbr::OriginalName("StartGame_Not_Ready_State")] StartGameNotReadyState = 163,
    /// <summary>
    /// 不是下注阶段，不能下注
    /// </summary>
    [pbr::OriginalName("Bet_Not_Bet_State")] BetNotBetState = 170,
    /// <summary>
    /// 庄家不能下注
    /// </summary>
    [pbr::OriginalName("Bet_Banker_Cannot_Bet")] BetBankerCannotBet = 171,
    /// <summary>
    /// 错误的筹码
    /// </summary>
    [pbr::OriginalName("Bet_Invalid_Chips")] BetInvalidChips = 172,
    /// <summary>
    /// 没有入座
    /// </summary>
    [pbr::OriginalName("Bet_Not_A_Player_On_Seat")] BetNotAPlayerOnSeat = 173,
    /// <summary>
    /// 已经下注
    /// </summary>
    [pbr::OriginalName("Bet_Already_Bet")] BetAlreadyBet = 174,
    /// <summary>
    /// 不是组牌阶段，不能组牌
    /// </summary>
    [pbr::OriginalName("Combine_Not_Combine_State")] CombineNotCombineState = 180,
    /// <summary>
    /// 没有参与本局
    /// </summary>
    [pbr::OriginalName("Combine_Not_In_This_Round")] CombineNotInThisRound = 181,
    /// <summary>
    /// 非法请求数据
    /// </summary>
    [pbr::OriginalName("Combine_Invalid_Request_Data")] CombineInvalidRequestData = 182,
    /// <summary>
    /// 已经提交过了
    /// </summary>
    [pbr::OriginalName("Combine_Already_Done")] CombineAlreadyDone = 183,
    /// <summary>
    /// 不是lucky
    /// </summary>
    [pbr::OriginalName("Combine_Not_Lucky")] CombineNotLucky = 184,
    /// <summary>
    /// 起始位置超出总数
    /// </summary>
    [pbr::OriginalName("GetScoreboard_Pos_Exceed_Range")] GetScoreboardPosExceedRange = 190,
    /// <summary>
    /// 不存在请求的局数
    /// </summary>
    [pbr::OriginalName("GetRoundHistory_Round_Not_Exist")] GetRoundHistoryRoundNotExist = 200,
    /// <summary>
    /// 不能关闭房间
    /// </summary>
    [pbr::OriginalName("CloseRoom_Cannot_Close")] CloseRoomCannotClose = 210,
  }

  /// <summary>
  /// login
  /// </summary>
  public enum LoginType {
    /// <summary>
    /// facebook
    /// </summary>
    [pbr::OriginalName("Facebook")] Facebook = 0,
  }

  public enum SitDownType {
    /// <summary>
    /// 坐下
    /// </summary>
    [pbr::OriginalName("Sit")] Sit = 0,
    /// <summary>
    /// 换座
    /// </summary>
    [pbr::OriginalName("Swap")] Swap = 1,
  }

  /// <summary>
  /// game state notify
  /// </summary>
  public enum GameState {
    /// <summary>
    /// 准备阶段
    /// </summary>
    [pbr::OriginalName("Ready")] Ready = 0,
    /// <summary>
    /// 下注
    /// </summary>
    [pbr::OriginalName("Bet")] Bet = 1,
    /// <summary>
    /// 确认下注
    /// </summary>
    [pbr::OriginalName("Confirm_Bet")] ConfirmBet = 2,
    /// <summary>
    /// 发牌
    /// </summary>
    [pbr::OriginalName("Deal")] Deal = 3,
    /// <summary>
    /// 组牌
    /// </summary>
    [pbr::OriginalName("Combine")] Combine = 4,
    /// <summary>
    /// show 牌
    /// </summary>
    [pbr::OriginalName("Show")] Show = 5,
    /// <summary>
    /// 结算
    /// </summary>
    [pbr::OriginalName("Result")] Result = 6,
    /// <summary>
    /// 关闭房间
    /// </summary>
    [pbr::OriginalName("CloseRoom")] CloseRoom = 7,
  }

  /// <summary>
  /// game
  /// </summary>
  public enum CardRank {
    /// <summary>
    /// 高牌
    /// </summary>
    [pbr::OriginalName("High_Card")] HighCard = 0,
    /// <summary>
    /// 一对
    /// </summary>
    [pbr::OriginalName("One_Pair")] OnePair = 1,
    /// <summary>
    /// 两对
    /// </summary>
    [pbr::OriginalName("Two_Pair")] TwoPair = 2,
    /// <summary>
    /// 三条
    /// </summary>
    [pbr::OriginalName("Three_Of_A_Kind")] ThreeOfAKind = 3,
    /// <summary>
    /// 顺子
    /// </summary>
    [pbr::OriginalName("Straight")] Straight = 4,
    /// <summary>
    /// 同花
    /// </summary>
    [pbr::OriginalName("Flush")] Flush = 5,
    /// <summary>
    /// 葫芦
    /// </summary>
    [pbr::OriginalName("Full_House")] FullHouse = 6,
    /// <summary>
    /// 四条
    /// </summary>
    [pbr::OriginalName("Four_Of_A_Kind")] FourOfAKind = 7,
    /// <summary>
    /// 同花顺
    /// </summary>
    [pbr::OriginalName("Straight_Flush")] StraightFlush = 8,
  }

  public enum CardColorSuit {
    /// <summary>
    /// 梅花
    /// </summary>
    [pbr::OriginalName("Clubs")] Clubs = 0,
    /// <summary>
    /// 黑桃
    /// </summary>
    [pbr::OriginalName("Spades")] Spades = 1,
    /// <summary>
    /// 红桃
    /// </summary>
    [pbr::OriginalName("Hearts")] Hearts = 2,
    /// <summary>
    /// 方块
    /// </summary>
    [pbr::OriginalName("Diamonds")] Diamonds = 3,
    [pbr::OriginalName("Count")] Count = 4,
  }

  #endregion

  #region Messages
  public sealed partial class Protocol : pb::IMessage<Protocol> {
    private static readonly pb::MessageParser<Protocol> _parser = new pb::MessageParser<Protocol>(() => new Protocol());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Protocol> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Protocol() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Protocol(Protocol other) : this() {
      msgid_ = other.msgid_;
      LoginReq = other.loginReq_ != null ? other.LoginReq.Clone() : null;
      LoginRsp = other.loginRsp_ != null ? other.LoginRsp.Clone() : null;
      KickNotify = other.kickNotify_ != null ? other.KickNotify.Clone() : null;
      CreateRoomReq = other.createRoomReq_ != null ? other.CreateRoomReq.Clone() : null;
      CreateRoomRsp = other.createRoomRsp_ != null ? other.CreateRoomRsp.Clone() : null;
      ConsumeDiamondsNotify = other.consumeDiamondsNotify_ != null ? other.ConsumeDiamondsNotify.Clone() : null;
      JoinRoomReq = other.joinRoomReq_ != null ? other.JoinRoomReq.Clone() : null;
      JoinRoomRsp = other.joinRoomRsp_ != null ? other.JoinRoomRsp.Clone() : null;
      JoinRoomNotify = other.joinRoomNotify_ != null ? other.JoinRoomNotify.Clone() : null;
      LeaveRoomReq = other.leaveRoomReq_ != null ? other.LeaveRoomReq.Clone() : null;
      LeaveRoomRsp = other.leaveRoomRsp_ != null ? other.LeaveRoomRsp.Clone() : null;
      LeaveRoomNotify = other.leaveRoomNotify_ != null ? other.LeaveRoomNotify.Clone() : null;
      SitDownReq = other.sitDownReq_ != null ? other.SitDownReq.Clone() : null;
      SitDownRsp = other.sitDownRsp_ != null ? other.SitDownRsp.Clone() : null;
      SitDownNotify = other.sitDownNotify_ != null ? other.SitDownNotify.Clone() : null;
      StandUpReq = other.standUpReq_ != null ? other.StandUpReq.Clone() : null;
      StandUpRsp = other.standUpRsp_ != null ? other.StandUpRsp.Clone() : null;
      StandUpNotify = other.standUpNotify_ != null ? other.StandUpNotify.Clone() : null;
      AutoBankerReq = other.autoBankerReq_ != null ? other.AutoBankerReq.Clone() : null;
      AutoBankerRsp = other.autoBankerRsp_ != null ? other.AutoBankerRsp.Clone() : null;
      StartGameReq = other.startGameReq_ != null ? other.StartGameReq.Clone() : null;
      StartGameRsp = other.startGameRsp_ != null ? other.StartGameRsp.Clone() : null;
      BetReq = other.betReq_ != null ? other.BetReq.Clone() : null;
      BetRsp = other.betRsp_ != null ? other.BetRsp.Clone() : null;
      BetNotify = other.betNotify_ != null ? other.BetNotify.Clone() : null;
      CombineReq = other.combineReq_ != null ? other.CombineReq.Clone() : null;
      CombineRsp = other.combineRsp_ != null ? other.CombineRsp.Clone() : null;
      CombineNotify = other.combineNotify_ != null ? other.CombineNotify.Clone() : null;
      GameStateNotify = other.gameStateNotify_ != null ? other.GameStateNotify.Clone() : null;
      DisconnectNotify = other.disconnectNotify_ != null ? other.DisconnectNotify.Clone() : null;
      ReconnectNotify = other.reconnectNotify_ != null ? other.ReconnectNotify.Clone() : null;
      GetScoreboardReq = other.getScoreboardReq_ != null ? other.GetScoreboardReq.Clone() : null;
      GetScoreboardRsp = other.getScoreboardRsp_ != null ? other.GetScoreboardRsp.Clone() : null;
      GetRoundHistoryReq = other.getRoundHistoryReq_ != null ? other.GetRoundHistoryReq.Clone() : null;
      GetRoundHistoryRsp = other.getRoundHistoryRsp_ != null ? other.GetRoundHistoryRsp.Clone() : null;
      ListRoomsReq = other.listRoomsReq_ != null ? other.ListRoomsReq.Clone() : null;
      ListRoomsRsp = other.listRoomsRsp_ != null ? other.ListRoomsRsp.Clone() : null;
      CloseRoomReq = other.closeRoomReq_ != null ? other.CloseRoomReq.Clone() : null;
      CloseRoomRsp = other.closeRoomRsp_ != null ? other.CloseRoomRsp.Clone() : null;
      GetProfileReq = other.getProfileReq_ != null ? other.GetProfileReq.Clone() : null;
      GetProfileRsp = other.getProfileRsp_ != null ? other.GetProfileRsp.Clone() : null;
      DiamondsRecordsReq = other.diamondsRecordsReq_ != null ? other.DiamondsRecordsReq.Clone() : null;
      DiamondsRecordsRsp = other.diamondsRecordsRsp_ != null ? other.DiamondsRecordsRsp.Clone() : null;
      SendDiamondsReq = other.sendDiamondsReq_ != null ? other.SendDiamondsReq.Clone() : null;
      SendDiamondsRsp = other.sendDiamondsRsp_ != null ? other.SendDiamondsRsp.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Protocol Clone() {
      return new Protocol(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::Msg.MessageID msgid_ = 0;
    /// <summary>
    /// msg id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.MessageID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "loginReq" field.</summary>
    public const int LoginReqFieldNumber = 2;
    private global::Msg.LoginReq loginReq_;
    /// <summary>
    /// login request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.LoginReq LoginReq {
      get { return loginReq_; }
      set {
        loginReq_ = value;
      }
    }

    /// <summary>Field number for the "loginRsp" field.</summary>
    public const int LoginRspFieldNumber = 3;
    private global::Msg.LoginRsp loginRsp_;
    /// <summary>
    /// login response
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.LoginRsp LoginRsp {
      get { return loginRsp_; }
      set {
        loginRsp_ = value;
      }
    }

    /// <summary>Field number for the "kickNotify" field.</summary>
    public const int KickNotifyFieldNumber = 4;
    private global::Msg.KickNotify kickNotify_;
    /// <summary>
    /// kick notify
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.KickNotify KickNotify {
      get { return kickNotify_; }
      set {
        kickNotify_ = value;
      }
    }

    /// <summary>Field number for the "createRoomReq" field.</summary>
    public const int CreateRoomReqFieldNumber = 5;
    private global::Msg.CreateRoomReq createRoomReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.CreateRoomReq CreateRoomReq {
      get { return createRoomReq_; }
      set {
        createRoomReq_ = value;
      }
    }

    /// <summary>Field number for the "createRoomRsp" field.</summary>
    public const int CreateRoomRspFieldNumber = 6;
    private global::Msg.CreateRoomRsp createRoomRsp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.CreateRoomRsp CreateRoomRsp {
      get { return createRoomRsp_; }
      set {
        createRoomRsp_ = value;
      }
    }

    /// <summary>Field number for the "consumeDiamondsNotify" field.</summary>
    public const int ConsumeDiamondsNotifyFieldNumber = 7;
    private global::Msg.ConsumeDiamondsNotify consumeDiamondsNotify_;
    /// <summary>
    /// 扣除钻石通知
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ConsumeDiamondsNotify ConsumeDiamondsNotify {
      get { return consumeDiamondsNotify_; }
      set {
        consumeDiamondsNotify_ = value;
      }
    }

    /// <summary>Field number for the "joinRoomReq" field.</summary>
    public const int JoinRoomReqFieldNumber = 8;
    private global::Msg.JoinRoomReq joinRoomReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.JoinRoomReq JoinRoomReq {
      get { return joinRoomReq_; }
      set {
        joinRoomReq_ = value;
      }
    }

    /// <summary>Field number for the "joinRoomRsp" field.</summary>
    public const int JoinRoomRspFieldNumber = 9;
    private global::Msg.JoinRoomRsp joinRoomRsp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.JoinRoomRsp JoinRoomRsp {
      get { return joinRoomRsp_; }
      set {
        joinRoomRsp_ = value;
      }
    }

    /// <summary>Field number for the "joinRoomNotify" field.</summary>
    public const int JoinRoomNotifyFieldNumber = 10;
    private global::Msg.JoinRoomNotify joinRoomNotify_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.JoinRoomNotify JoinRoomNotify {
      get { return joinRoomNotify_; }
      set {
        joinRoomNotify_ = value;
      }
    }

    /// <summary>Field number for the "leaveRoomReq" field.</summary>
    public const int LeaveRoomReqFieldNumber = 11;
    private global::Msg.LeaveRoomReq leaveRoomReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.LeaveRoomReq LeaveRoomReq {
      get { return leaveRoomReq_; }
      set {
        leaveRoomReq_ = value;
      }
    }

    /// <summary>Field number for the "leaveRoomRsp" field.</summary>
    public const int LeaveRoomRspFieldNumber = 12;
    private global::Msg.LeaveRoomRsp leaveRoomRsp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.LeaveRoomRsp LeaveRoomRsp {
      get { return leaveRoomRsp_; }
      set {
        leaveRoomRsp_ = value;
      }
    }

    /// <summary>Field number for the "leaveRoomNotify" field.</summary>
    public const int LeaveRoomNotifyFieldNumber = 13;
    private global::Msg.LeaveRoomNotify leaveRoomNotify_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.LeaveRoomNotify LeaveRoomNotify {
      get { return leaveRoomNotify_; }
      set {
        leaveRoomNotify_ = value;
      }
    }

    /// <summary>Field number for the "sitDownReq" field.</summary>
    public const int SitDownReqFieldNumber = 14;
    private global::Msg.SitDownReq sitDownReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.SitDownReq SitDownReq {
      get { return sitDownReq_; }
      set {
        sitDownReq_ = value;
      }
    }

    /// <summary>Field number for the "sitDownRsp" field.</summary>
    public const int SitDownRspFieldNumber = 15;
    private global::Msg.SitDownRsp sitDownRsp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.SitDownRsp SitDownRsp {
      get { return sitDownRsp_; }
      set {
        sitDownRsp_ = value;
      }
    }

    /// <summary>Field number for the "sitDownNotify" field.</summary>
    public const int SitDownNotifyFieldNumber = 16;
    private global::Msg.SitDownNotify sitDownNotify_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.SitDownNotify SitDownNotify {
      get { return sitDownNotify_; }
      set {
        sitDownNotify_ = value;
      }
    }

    /// <summary>Field number for the "standUpReq" field.</summary>
    public const int StandUpReqFieldNumber = 17;
    private global::Msg.StandUpReq standUpReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.StandUpReq StandUpReq {
      get { return standUpReq_; }
      set {
        standUpReq_ = value;
      }
    }

    /// <summary>Field number for the "standUpRsp" field.</summary>
    public const int StandUpRspFieldNumber = 18;
    private global::Msg.StandUpRsp standUpRsp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.StandUpRsp StandUpRsp {
      get { return standUpRsp_; }
      set {
        standUpRsp_ = value;
      }
    }

    /// <summary>Field number for the "standUpNotify" field.</summary>
    public const int StandUpNotifyFieldNumber = 19;
    private global::Msg.StandUpNotify standUpNotify_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.StandUpNotify StandUpNotify {
      get { return standUpNotify_; }
      set {
        standUpNotify_ = value;
      }
    }

    /// <summary>Field number for the "autoBankerReq" field.</summary>
    public const int AutoBankerReqFieldNumber = 23;
    private global::Msg.AutoBankerReq autoBankerReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.AutoBankerReq AutoBankerReq {
      get { return autoBankerReq_; }
      set {
        autoBankerReq_ = value;
      }
    }

    /// <summary>Field number for the "autoBankerRsp" field.</summary>
    public const int AutoBankerRspFieldNumber = 24;
    private global::Msg.AutoBankerRsp autoBankerRsp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.AutoBankerRsp AutoBankerRsp {
      get { return autoBankerRsp_; }
      set {
        autoBankerRsp_ = value;
      }
    }

    /// <summary>Field number for the "startGameReq" field.</summary>
    public const int StartGameReqFieldNumber = 25;
    private global::Msg.StartGameReq startGameReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.StartGameReq StartGameReq {
      get { return startGameReq_; }
      set {
        startGameReq_ = value;
      }
    }

    /// <summary>Field number for the "startGameRsp" field.</summary>
    public const int StartGameRspFieldNumber = 26;
    private global::Msg.StartGameRsp startGameRsp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.StartGameRsp StartGameRsp {
      get { return startGameRsp_; }
      set {
        startGameRsp_ = value;
      }
    }

    /// <summary>Field number for the "betReq" field.</summary>
    public const int BetReqFieldNumber = 27;
    private global::Msg.BetReq betReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.BetReq BetReq {
      get { return betReq_; }
      set {
        betReq_ = value;
      }
    }

    /// <summary>Field number for the "betRsp" field.</summary>
    public const int BetRspFieldNumber = 28;
    private global::Msg.BetRsp betRsp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.BetRsp BetRsp {
      get { return betRsp_; }
      set {
        betRsp_ = value;
      }
    }

    /// <summary>Field number for the "betNotify" field.</summary>
    public const int BetNotifyFieldNumber = 29;
    private global::Msg.BetNotify betNotify_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.BetNotify BetNotify {
      get { return betNotify_; }
      set {
        betNotify_ = value;
      }
    }

    /// <summary>Field number for the "combineReq" field.</summary>
    public const int CombineReqFieldNumber = 30;
    private global::Msg.CombineReq combineReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.CombineReq CombineReq {
      get { return combineReq_; }
      set {
        combineReq_ = value;
      }
    }

    /// <summary>Field number for the "combineRsp" field.</summary>
    public const int CombineRspFieldNumber = 31;
    private global::Msg.CombineRsp combineRsp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.CombineRsp CombineRsp {
      get { return combineRsp_; }
      set {
        combineRsp_ = value;
      }
    }

    /// <summary>Field number for the "combineNotify" field.</summary>
    public const int CombineNotifyFieldNumber = 32;
    private global::Msg.CombineNotify combineNotify_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.CombineNotify CombineNotify {
      get { return combineNotify_; }
      set {
        combineNotify_ = value;
      }
    }

    /// <summary>Field number for the "gameStateNotify" field.</summary>
    public const int GameStateNotifyFieldNumber = 34;
    private global::Msg.GameStateNotify gameStateNotify_;
    /// <summary>
    ///ResultNotify resultNotify = 33;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.GameStateNotify GameStateNotify {
      get { return gameStateNotify_; }
      set {
        gameStateNotify_ = value;
      }
    }

    /// <summary>Field number for the "disconnectNotify" field.</summary>
    public const int DisconnectNotifyFieldNumber = 35;
    private global::Msg.DisconnectNotify disconnectNotify_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.DisconnectNotify DisconnectNotify {
      get { return disconnectNotify_; }
      set {
        disconnectNotify_ = value;
      }
    }

    /// <summary>Field number for the "reconnectNotify" field.</summary>
    public const int ReconnectNotifyFieldNumber = 36;
    private global::Msg.ReconnectNotify reconnectNotify_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ReconnectNotify ReconnectNotify {
      get { return reconnectNotify_; }
      set {
        reconnectNotify_ = value;
      }
    }

    /// <summary>Field number for the "getScoreboardReq" field.</summary>
    public const int GetScoreboardReqFieldNumber = 37;
    private global::Msg.GetScoreboardReq getScoreboardReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.GetScoreboardReq GetScoreboardReq {
      get { return getScoreboardReq_; }
      set {
        getScoreboardReq_ = value;
      }
    }

    /// <summary>Field number for the "getScoreboardRsp" field.</summary>
    public const int GetScoreboardRspFieldNumber = 38;
    private global::Msg.GetScoreboardRsp getScoreboardRsp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.GetScoreboardRsp GetScoreboardRsp {
      get { return getScoreboardRsp_; }
      set {
        getScoreboardRsp_ = value;
      }
    }

    /// <summary>Field number for the "getRoundHistoryReq" field.</summary>
    public const int GetRoundHistoryReqFieldNumber = 39;
    private global::Msg.GetRoundHistoryReq getRoundHistoryReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.GetRoundHistoryReq GetRoundHistoryReq {
      get { return getRoundHistoryReq_; }
      set {
        getRoundHistoryReq_ = value;
      }
    }

    /// <summary>Field number for the "getRoundHistoryRsp" field.</summary>
    public const int GetRoundHistoryRspFieldNumber = 40;
    private global::Msg.GetRoundHistoryRsp getRoundHistoryRsp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.GetRoundHistoryRsp GetRoundHistoryRsp {
      get { return getRoundHistoryRsp_; }
      set {
        getRoundHistoryRsp_ = value;
      }
    }

    /// <summary>Field number for the "listRoomsReq" field.</summary>
    public const int ListRoomsReqFieldNumber = 41;
    private global::Msg.ListRoomsReq listRoomsReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ListRoomsReq ListRoomsReq {
      get { return listRoomsReq_; }
      set {
        listRoomsReq_ = value;
      }
    }

    /// <summary>Field number for the "listRoomsRsp" field.</summary>
    public const int ListRoomsRspFieldNumber = 42;
    private global::Msg.ListRoomsRsp listRoomsRsp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ListRoomsRsp ListRoomsRsp {
      get { return listRoomsRsp_; }
      set {
        listRoomsRsp_ = value;
      }
    }

    /// <summary>Field number for the "closeRoomReq" field.</summary>
    public const int CloseRoomReqFieldNumber = 43;
    private global::Msg.CloseRoomReq closeRoomReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.CloseRoomReq CloseRoomReq {
      get { return closeRoomReq_; }
      set {
        closeRoomReq_ = value;
      }
    }

    /// <summary>Field number for the "closeRoomRsp" field.</summary>
    public const int CloseRoomRspFieldNumber = 44;
    private global::Msg.CloseRoomRsp closeRoomRsp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.CloseRoomRsp CloseRoomRsp {
      get { return closeRoomRsp_; }
      set {
        closeRoomRsp_ = value;
      }
    }

    /// <summary>Field number for the "getProfileReq" field.</summary>
    public const int GetProfileReqFieldNumber = 45;
    private global::Msg.GetProfileReq getProfileReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.GetProfileReq GetProfileReq {
      get { return getProfileReq_; }
      set {
        getProfileReq_ = value;
      }
    }

    /// <summary>Field number for the "getProfileRsp" field.</summary>
    public const int GetProfileRspFieldNumber = 46;
    private global::Msg.GetProfileRsp getProfileRsp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.GetProfileRsp GetProfileRsp {
      get { return getProfileRsp_; }
      set {
        getProfileRsp_ = value;
      }
    }

    /// <summary>Field number for the "diamondsRecordsReq" field.</summary>
    public const int DiamondsRecordsReqFieldNumber = 47;
    private global::Msg.DiamondsRecordsReq diamondsRecordsReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.DiamondsRecordsReq DiamondsRecordsReq {
      get { return diamondsRecordsReq_; }
      set {
        diamondsRecordsReq_ = value;
      }
    }

    /// <summary>Field number for the "diamondsRecordsRsp" field.</summary>
    public const int DiamondsRecordsRspFieldNumber = 48;
    private global::Msg.DiamondsRecordsRsp diamondsRecordsRsp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.DiamondsRecordsRsp DiamondsRecordsRsp {
      get { return diamondsRecordsRsp_; }
      set {
        diamondsRecordsRsp_ = value;
      }
    }

    /// <summary>Field number for the "sendDiamondsReq" field.</summary>
    public const int SendDiamondsReqFieldNumber = 49;
    private global::Msg.SendDiamondsReq sendDiamondsReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.SendDiamondsReq SendDiamondsReq {
      get { return sendDiamondsReq_; }
      set {
        sendDiamondsReq_ = value;
      }
    }

    /// <summary>Field number for the "sendDiamondsRsp" field.</summary>
    public const int SendDiamondsRspFieldNumber = 50;
    private global::Msg.SendDiamondsRsp sendDiamondsRsp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.SendDiamondsRsp SendDiamondsRsp {
      get { return sendDiamondsRsp_; }
      set {
        sendDiamondsRsp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Protocol);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Protocol other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (!object.Equals(LoginReq, other.LoginReq)) return false;
      if (!object.Equals(LoginRsp, other.LoginRsp)) return false;
      if (!object.Equals(KickNotify, other.KickNotify)) return false;
      if (!object.Equals(CreateRoomReq, other.CreateRoomReq)) return false;
      if (!object.Equals(CreateRoomRsp, other.CreateRoomRsp)) return false;
      if (!object.Equals(ConsumeDiamondsNotify, other.ConsumeDiamondsNotify)) return false;
      if (!object.Equals(JoinRoomReq, other.JoinRoomReq)) return false;
      if (!object.Equals(JoinRoomRsp, other.JoinRoomRsp)) return false;
      if (!object.Equals(JoinRoomNotify, other.JoinRoomNotify)) return false;
      if (!object.Equals(LeaveRoomReq, other.LeaveRoomReq)) return false;
      if (!object.Equals(LeaveRoomRsp, other.LeaveRoomRsp)) return false;
      if (!object.Equals(LeaveRoomNotify, other.LeaveRoomNotify)) return false;
      if (!object.Equals(SitDownReq, other.SitDownReq)) return false;
      if (!object.Equals(SitDownRsp, other.SitDownRsp)) return false;
      if (!object.Equals(SitDownNotify, other.SitDownNotify)) return false;
      if (!object.Equals(StandUpReq, other.StandUpReq)) return false;
      if (!object.Equals(StandUpRsp, other.StandUpRsp)) return false;
      if (!object.Equals(StandUpNotify, other.StandUpNotify)) return false;
      if (!object.Equals(AutoBankerReq, other.AutoBankerReq)) return false;
      if (!object.Equals(AutoBankerRsp, other.AutoBankerRsp)) return false;
      if (!object.Equals(StartGameReq, other.StartGameReq)) return false;
      if (!object.Equals(StartGameRsp, other.StartGameRsp)) return false;
      if (!object.Equals(BetReq, other.BetReq)) return false;
      if (!object.Equals(BetRsp, other.BetRsp)) return false;
      if (!object.Equals(BetNotify, other.BetNotify)) return false;
      if (!object.Equals(CombineReq, other.CombineReq)) return false;
      if (!object.Equals(CombineRsp, other.CombineRsp)) return false;
      if (!object.Equals(CombineNotify, other.CombineNotify)) return false;
      if (!object.Equals(GameStateNotify, other.GameStateNotify)) return false;
      if (!object.Equals(DisconnectNotify, other.DisconnectNotify)) return false;
      if (!object.Equals(ReconnectNotify, other.ReconnectNotify)) return false;
      if (!object.Equals(GetScoreboardReq, other.GetScoreboardReq)) return false;
      if (!object.Equals(GetScoreboardRsp, other.GetScoreboardRsp)) return false;
      if (!object.Equals(GetRoundHistoryReq, other.GetRoundHistoryReq)) return false;
      if (!object.Equals(GetRoundHistoryRsp, other.GetRoundHistoryRsp)) return false;
      if (!object.Equals(ListRoomsReq, other.ListRoomsReq)) return false;
      if (!object.Equals(ListRoomsRsp, other.ListRoomsRsp)) return false;
      if (!object.Equals(CloseRoomReq, other.CloseRoomReq)) return false;
      if (!object.Equals(CloseRoomRsp, other.CloseRoomRsp)) return false;
      if (!object.Equals(GetProfileReq, other.GetProfileReq)) return false;
      if (!object.Equals(GetProfileRsp, other.GetProfileRsp)) return false;
      if (!object.Equals(DiamondsRecordsReq, other.DiamondsRecordsReq)) return false;
      if (!object.Equals(DiamondsRecordsRsp, other.DiamondsRecordsRsp)) return false;
      if (!object.Equals(SendDiamondsReq, other.SendDiamondsReq)) return false;
      if (!object.Equals(SendDiamondsRsp, other.SendDiamondsRsp)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (loginReq_ != null) hash ^= LoginReq.GetHashCode();
      if (loginRsp_ != null) hash ^= LoginRsp.GetHashCode();
      if (kickNotify_ != null) hash ^= KickNotify.GetHashCode();
      if (createRoomReq_ != null) hash ^= CreateRoomReq.GetHashCode();
      if (createRoomRsp_ != null) hash ^= CreateRoomRsp.GetHashCode();
      if (consumeDiamondsNotify_ != null) hash ^= ConsumeDiamondsNotify.GetHashCode();
      if (joinRoomReq_ != null) hash ^= JoinRoomReq.GetHashCode();
      if (joinRoomRsp_ != null) hash ^= JoinRoomRsp.GetHashCode();
      if (joinRoomNotify_ != null) hash ^= JoinRoomNotify.GetHashCode();
      if (leaveRoomReq_ != null) hash ^= LeaveRoomReq.GetHashCode();
      if (leaveRoomRsp_ != null) hash ^= LeaveRoomRsp.GetHashCode();
      if (leaveRoomNotify_ != null) hash ^= LeaveRoomNotify.GetHashCode();
      if (sitDownReq_ != null) hash ^= SitDownReq.GetHashCode();
      if (sitDownRsp_ != null) hash ^= SitDownRsp.GetHashCode();
      if (sitDownNotify_ != null) hash ^= SitDownNotify.GetHashCode();
      if (standUpReq_ != null) hash ^= StandUpReq.GetHashCode();
      if (standUpRsp_ != null) hash ^= StandUpRsp.GetHashCode();
      if (standUpNotify_ != null) hash ^= StandUpNotify.GetHashCode();
      if (autoBankerReq_ != null) hash ^= AutoBankerReq.GetHashCode();
      if (autoBankerRsp_ != null) hash ^= AutoBankerRsp.GetHashCode();
      if (startGameReq_ != null) hash ^= StartGameReq.GetHashCode();
      if (startGameRsp_ != null) hash ^= StartGameRsp.GetHashCode();
      if (betReq_ != null) hash ^= BetReq.GetHashCode();
      if (betRsp_ != null) hash ^= BetRsp.GetHashCode();
      if (betNotify_ != null) hash ^= BetNotify.GetHashCode();
      if (combineReq_ != null) hash ^= CombineReq.GetHashCode();
      if (combineRsp_ != null) hash ^= CombineRsp.GetHashCode();
      if (combineNotify_ != null) hash ^= CombineNotify.GetHashCode();
      if (gameStateNotify_ != null) hash ^= GameStateNotify.GetHashCode();
      if (disconnectNotify_ != null) hash ^= DisconnectNotify.GetHashCode();
      if (reconnectNotify_ != null) hash ^= ReconnectNotify.GetHashCode();
      if (getScoreboardReq_ != null) hash ^= GetScoreboardReq.GetHashCode();
      if (getScoreboardRsp_ != null) hash ^= GetScoreboardRsp.GetHashCode();
      if (getRoundHistoryReq_ != null) hash ^= GetRoundHistoryReq.GetHashCode();
      if (getRoundHistoryRsp_ != null) hash ^= GetRoundHistoryRsp.GetHashCode();
      if (listRoomsReq_ != null) hash ^= ListRoomsReq.GetHashCode();
      if (listRoomsRsp_ != null) hash ^= ListRoomsRsp.GetHashCode();
      if (closeRoomReq_ != null) hash ^= CloseRoomReq.GetHashCode();
      if (closeRoomRsp_ != null) hash ^= CloseRoomRsp.GetHashCode();
      if (getProfileReq_ != null) hash ^= GetProfileReq.GetHashCode();
      if (getProfileRsp_ != null) hash ^= GetProfileRsp.GetHashCode();
      if (diamondsRecordsReq_ != null) hash ^= DiamondsRecordsReq.GetHashCode();
      if (diamondsRecordsRsp_ != null) hash ^= DiamondsRecordsRsp.GetHashCode();
      if (sendDiamondsReq_ != null) hash ^= SendDiamondsReq.GetHashCode();
      if (sendDiamondsRsp_ != null) hash ^= SendDiamondsRsp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (loginReq_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LoginReq);
      }
      if (loginRsp_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LoginRsp);
      }
      if (kickNotify_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(KickNotify);
      }
      if (createRoomReq_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CreateRoomReq);
      }
      if (createRoomRsp_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CreateRoomRsp);
      }
      if (consumeDiamondsNotify_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ConsumeDiamondsNotify);
      }
      if (joinRoomReq_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(JoinRoomReq);
      }
      if (joinRoomRsp_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(JoinRoomRsp);
      }
      if (joinRoomNotify_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(JoinRoomNotify);
      }
      if (leaveRoomReq_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(LeaveRoomReq);
      }
      if (leaveRoomRsp_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(LeaveRoomRsp);
      }
      if (leaveRoomNotify_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(LeaveRoomNotify);
      }
      if (sitDownReq_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(SitDownReq);
      }
      if (sitDownRsp_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(SitDownRsp);
      }
      if (sitDownNotify_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(SitDownNotify);
      }
      if (standUpReq_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(StandUpReq);
      }
      if (standUpRsp_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(StandUpRsp);
      }
      if (standUpNotify_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(StandUpNotify);
      }
      if (autoBankerReq_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(AutoBankerReq);
      }
      if (autoBankerRsp_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(AutoBankerRsp);
      }
      if (startGameReq_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(StartGameReq);
      }
      if (startGameRsp_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(StartGameRsp);
      }
      if (betReq_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(BetReq);
      }
      if (betRsp_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(BetRsp);
      }
      if (betNotify_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(BetNotify);
      }
      if (combineReq_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(CombineReq);
      }
      if (combineRsp_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(CombineRsp);
      }
      if (combineNotify_ != null) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(CombineNotify);
      }
      if (gameStateNotify_ != null) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(GameStateNotify);
      }
      if (disconnectNotify_ != null) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(DisconnectNotify);
      }
      if (reconnectNotify_ != null) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(ReconnectNotify);
      }
      if (getScoreboardReq_ != null) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(GetScoreboardReq);
      }
      if (getScoreboardRsp_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(GetScoreboardRsp);
      }
      if (getRoundHistoryReq_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(GetRoundHistoryReq);
      }
      if (getRoundHistoryRsp_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(GetRoundHistoryRsp);
      }
      if (listRoomsReq_ != null) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(ListRoomsReq);
      }
      if (listRoomsRsp_ != null) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(ListRoomsRsp);
      }
      if (closeRoomReq_ != null) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(CloseRoomReq);
      }
      if (closeRoomRsp_ != null) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(CloseRoomRsp);
      }
      if (getProfileReq_ != null) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(GetProfileReq);
      }
      if (getProfileRsp_ != null) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(GetProfileRsp);
      }
      if (diamondsRecordsReq_ != null) {
        output.WriteRawTag(250, 2);
        output.WriteMessage(DiamondsRecordsReq);
      }
      if (diamondsRecordsRsp_ != null) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(DiamondsRecordsRsp);
      }
      if (sendDiamondsReq_ != null) {
        output.WriteRawTag(138, 3);
        output.WriteMessage(SendDiamondsReq);
      }
      if (sendDiamondsRsp_ != null) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(SendDiamondsRsp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (loginReq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginReq);
      }
      if (loginRsp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginRsp);
      }
      if (kickNotify_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KickNotify);
      }
      if (createRoomReq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateRoomReq);
      }
      if (createRoomRsp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateRoomRsp);
      }
      if (consumeDiamondsNotify_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConsumeDiamondsNotify);
      }
      if (joinRoomReq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JoinRoomReq);
      }
      if (joinRoomRsp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JoinRoomRsp);
      }
      if (joinRoomNotify_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JoinRoomNotify);
      }
      if (leaveRoomReq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeaveRoomReq);
      }
      if (leaveRoomRsp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeaveRoomRsp);
      }
      if (leaveRoomNotify_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeaveRoomNotify);
      }
      if (sitDownReq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SitDownReq);
      }
      if (sitDownRsp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SitDownRsp);
      }
      if (sitDownNotify_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SitDownNotify);
      }
      if (standUpReq_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StandUpReq);
      }
      if (standUpRsp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StandUpRsp);
      }
      if (standUpNotify_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StandUpNotify);
      }
      if (autoBankerReq_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AutoBankerReq);
      }
      if (autoBankerRsp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AutoBankerRsp);
      }
      if (startGameReq_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StartGameReq);
      }
      if (startGameRsp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StartGameRsp);
      }
      if (betReq_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BetReq);
      }
      if (betRsp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BetRsp);
      }
      if (betNotify_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BetNotify);
      }
      if (combineReq_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CombineReq);
      }
      if (combineRsp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CombineRsp);
      }
      if (combineNotify_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CombineNotify);
      }
      if (gameStateNotify_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GameStateNotify);
      }
      if (disconnectNotify_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DisconnectNotify);
      }
      if (reconnectNotify_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReconnectNotify);
      }
      if (getScoreboardReq_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetScoreboardReq);
      }
      if (getScoreboardRsp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetScoreboardRsp);
      }
      if (getRoundHistoryReq_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetRoundHistoryReq);
      }
      if (getRoundHistoryRsp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetRoundHistoryRsp);
      }
      if (listRoomsReq_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ListRoomsReq);
      }
      if (listRoomsRsp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ListRoomsRsp);
      }
      if (closeRoomReq_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CloseRoomReq);
      }
      if (closeRoomRsp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CloseRoomRsp);
      }
      if (getProfileReq_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetProfileReq);
      }
      if (getProfileRsp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetProfileRsp);
      }
      if (diamondsRecordsReq_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DiamondsRecordsReq);
      }
      if (diamondsRecordsRsp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DiamondsRecordsRsp);
      }
      if (sendDiamondsReq_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SendDiamondsReq);
      }
      if (sendDiamondsRsp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SendDiamondsRsp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Protocol other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.loginReq_ != null) {
        if (loginReq_ == null) {
          loginReq_ = new global::Msg.LoginReq();
        }
        LoginReq.MergeFrom(other.LoginReq);
      }
      if (other.loginRsp_ != null) {
        if (loginRsp_ == null) {
          loginRsp_ = new global::Msg.LoginRsp();
        }
        LoginRsp.MergeFrom(other.LoginRsp);
      }
      if (other.kickNotify_ != null) {
        if (kickNotify_ == null) {
          kickNotify_ = new global::Msg.KickNotify();
        }
        KickNotify.MergeFrom(other.KickNotify);
      }
      if (other.createRoomReq_ != null) {
        if (createRoomReq_ == null) {
          createRoomReq_ = new global::Msg.CreateRoomReq();
        }
        CreateRoomReq.MergeFrom(other.CreateRoomReq);
      }
      if (other.createRoomRsp_ != null) {
        if (createRoomRsp_ == null) {
          createRoomRsp_ = new global::Msg.CreateRoomRsp();
        }
        CreateRoomRsp.MergeFrom(other.CreateRoomRsp);
      }
      if (other.consumeDiamondsNotify_ != null) {
        if (consumeDiamondsNotify_ == null) {
          consumeDiamondsNotify_ = new global::Msg.ConsumeDiamondsNotify();
        }
        ConsumeDiamondsNotify.MergeFrom(other.ConsumeDiamondsNotify);
      }
      if (other.joinRoomReq_ != null) {
        if (joinRoomReq_ == null) {
          joinRoomReq_ = new global::Msg.JoinRoomReq();
        }
        JoinRoomReq.MergeFrom(other.JoinRoomReq);
      }
      if (other.joinRoomRsp_ != null) {
        if (joinRoomRsp_ == null) {
          joinRoomRsp_ = new global::Msg.JoinRoomRsp();
        }
        JoinRoomRsp.MergeFrom(other.JoinRoomRsp);
      }
      if (other.joinRoomNotify_ != null) {
        if (joinRoomNotify_ == null) {
          joinRoomNotify_ = new global::Msg.JoinRoomNotify();
        }
        JoinRoomNotify.MergeFrom(other.JoinRoomNotify);
      }
      if (other.leaveRoomReq_ != null) {
        if (leaveRoomReq_ == null) {
          leaveRoomReq_ = new global::Msg.LeaveRoomReq();
        }
        LeaveRoomReq.MergeFrom(other.LeaveRoomReq);
      }
      if (other.leaveRoomRsp_ != null) {
        if (leaveRoomRsp_ == null) {
          leaveRoomRsp_ = new global::Msg.LeaveRoomRsp();
        }
        LeaveRoomRsp.MergeFrom(other.LeaveRoomRsp);
      }
      if (other.leaveRoomNotify_ != null) {
        if (leaveRoomNotify_ == null) {
          leaveRoomNotify_ = new global::Msg.LeaveRoomNotify();
        }
        LeaveRoomNotify.MergeFrom(other.LeaveRoomNotify);
      }
      if (other.sitDownReq_ != null) {
        if (sitDownReq_ == null) {
          sitDownReq_ = new global::Msg.SitDownReq();
        }
        SitDownReq.MergeFrom(other.SitDownReq);
      }
      if (other.sitDownRsp_ != null) {
        if (sitDownRsp_ == null) {
          sitDownRsp_ = new global::Msg.SitDownRsp();
        }
        SitDownRsp.MergeFrom(other.SitDownRsp);
      }
      if (other.sitDownNotify_ != null) {
        if (sitDownNotify_ == null) {
          sitDownNotify_ = new global::Msg.SitDownNotify();
        }
        SitDownNotify.MergeFrom(other.SitDownNotify);
      }
      if (other.standUpReq_ != null) {
        if (standUpReq_ == null) {
          standUpReq_ = new global::Msg.StandUpReq();
        }
        StandUpReq.MergeFrom(other.StandUpReq);
      }
      if (other.standUpRsp_ != null) {
        if (standUpRsp_ == null) {
          standUpRsp_ = new global::Msg.StandUpRsp();
        }
        StandUpRsp.MergeFrom(other.StandUpRsp);
      }
      if (other.standUpNotify_ != null) {
        if (standUpNotify_ == null) {
          standUpNotify_ = new global::Msg.StandUpNotify();
        }
        StandUpNotify.MergeFrom(other.StandUpNotify);
      }
      if (other.autoBankerReq_ != null) {
        if (autoBankerReq_ == null) {
          autoBankerReq_ = new global::Msg.AutoBankerReq();
        }
        AutoBankerReq.MergeFrom(other.AutoBankerReq);
      }
      if (other.autoBankerRsp_ != null) {
        if (autoBankerRsp_ == null) {
          autoBankerRsp_ = new global::Msg.AutoBankerRsp();
        }
        AutoBankerRsp.MergeFrom(other.AutoBankerRsp);
      }
      if (other.startGameReq_ != null) {
        if (startGameReq_ == null) {
          startGameReq_ = new global::Msg.StartGameReq();
        }
        StartGameReq.MergeFrom(other.StartGameReq);
      }
      if (other.startGameRsp_ != null) {
        if (startGameRsp_ == null) {
          startGameRsp_ = new global::Msg.StartGameRsp();
        }
        StartGameRsp.MergeFrom(other.StartGameRsp);
      }
      if (other.betReq_ != null) {
        if (betReq_ == null) {
          betReq_ = new global::Msg.BetReq();
        }
        BetReq.MergeFrom(other.BetReq);
      }
      if (other.betRsp_ != null) {
        if (betRsp_ == null) {
          betRsp_ = new global::Msg.BetRsp();
        }
        BetRsp.MergeFrom(other.BetRsp);
      }
      if (other.betNotify_ != null) {
        if (betNotify_ == null) {
          betNotify_ = new global::Msg.BetNotify();
        }
        BetNotify.MergeFrom(other.BetNotify);
      }
      if (other.combineReq_ != null) {
        if (combineReq_ == null) {
          combineReq_ = new global::Msg.CombineReq();
        }
        CombineReq.MergeFrom(other.CombineReq);
      }
      if (other.combineRsp_ != null) {
        if (combineRsp_ == null) {
          combineRsp_ = new global::Msg.CombineRsp();
        }
        CombineRsp.MergeFrom(other.CombineRsp);
      }
      if (other.combineNotify_ != null) {
        if (combineNotify_ == null) {
          combineNotify_ = new global::Msg.CombineNotify();
        }
        CombineNotify.MergeFrom(other.CombineNotify);
      }
      if (other.gameStateNotify_ != null) {
        if (gameStateNotify_ == null) {
          gameStateNotify_ = new global::Msg.GameStateNotify();
        }
        GameStateNotify.MergeFrom(other.GameStateNotify);
      }
      if (other.disconnectNotify_ != null) {
        if (disconnectNotify_ == null) {
          disconnectNotify_ = new global::Msg.DisconnectNotify();
        }
        DisconnectNotify.MergeFrom(other.DisconnectNotify);
      }
      if (other.reconnectNotify_ != null) {
        if (reconnectNotify_ == null) {
          reconnectNotify_ = new global::Msg.ReconnectNotify();
        }
        ReconnectNotify.MergeFrom(other.ReconnectNotify);
      }
      if (other.getScoreboardReq_ != null) {
        if (getScoreboardReq_ == null) {
          getScoreboardReq_ = new global::Msg.GetScoreboardReq();
        }
        GetScoreboardReq.MergeFrom(other.GetScoreboardReq);
      }
      if (other.getScoreboardRsp_ != null) {
        if (getScoreboardRsp_ == null) {
          getScoreboardRsp_ = new global::Msg.GetScoreboardRsp();
        }
        GetScoreboardRsp.MergeFrom(other.GetScoreboardRsp);
      }
      if (other.getRoundHistoryReq_ != null) {
        if (getRoundHistoryReq_ == null) {
          getRoundHistoryReq_ = new global::Msg.GetRoundHistoryReq();
        }
        GetRoundHistoryReq.MergeFrom(other.GetRoundHistoryReq);
      }
      if (other.getRoundHistoryRsp_ != null) {
        if (getRoundHistoryRsp_ == null) {
          getRoundHistoryRsp_ = new global::Msg.GetRoundHistoryRsp();
        }
        GetRoundHistoryRsp.MergeFrom(other.GetRoundHistoryRsp);
      }
      if (other.listRoomsReq_ != null) {
        if (listRoomsReq_ == null) {
          listRoomsReq_ = new global::Msg.ListRoomsReq();
        }
        ListRoomsReq.MergeFrom(other.ListRoomsReq);
      }
      if (other.listRoomsRsp_ != null) {
        if (listRoomsRsp_ == null) {
          listRoomsRsp_ = new global::Msg.ListRoomsRsp();
        }
        ListRoomsRsp.MergeFrom(other.ListRoomsRsp);
      }
      if (other.closeRoomReq_ != null) {
        if (closeRoomReq_ == null) {
          closeRoomReq_ = new global::Msg.CloseRoomReq();
        }
        CloseRoomReq.MergeFrom(other.CloseRoomReq);
      }
      if (other.closeRoomRsp_ != null) {
        if (closeRoomRsp_ == null) {
          closeRoomRsp_ = new global::Msg.CloseRoomRsp();
        }
        CloseRoomRsp.MergeFrom(other.CloseRoomRsp);
      }
      if (other.getProfileReq_ != null) {
        if (getProfileReq_ == null) {
          getProfileReq_ = new global::Msg.GetProfileReq();
        }
        GetProfileReq.MergeFrom(other.GetProfileReq);
      }
      if (other.getProfileRsp_ != null) {
        if (getProfileRsp_ == null) {
          getProfileRsp_ = new global::Msg.GetProfileRsp();
        }
        GetProfileRsp.MergeFrom(other.GetProfileRsp);
      }
      if (other.diamondsRecordsReq_ != null) {
        if (diamondsRecordsReq_ == null) {
          diamondsRecordsReq_ = new global::Msg.DiamondsRecordsReq();
        }
        DiamondsRecordsReq.MergeFrom(other.DiamondsRecordsReq);
      }
      if (other.diamondsRecordsRsp_ != null) {
        if (diamondsRecordsRsp_ == null) {
          diamondsRecordsRsp_ = new global::Msg.DiamondsRecordsRsp();
        }
        DiamondsRecordsRsp.MergeFrom(other.DiamondsRecordsRsp);
      }
      if (other.sendDiamondsReq_ != null) {
        if (sendDiamondsReq_ == null) {
          sendDiamondsReq_ = new global::Msg.SendDiamondsReq();
        }
        SendDiamondsReq.MergeFrom(other.SendDiamondsReq);
      }
      if (other.sendDiamondsRsp_ != null) {
        if (sendDiamondsRsp_ == null) {
          sendDiamondsRsp_ = new global::Msg.SendDiamondsRsp();
        }
        SendDiamondsRsp.MergeFrom(other.SendDiamondsRsp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            msgid_ = (global::Msg.MessageID) input.ReadEnum();
            break;
          }
          case 18: {
            if (loginReq_ == null) {
              loginReq_ = new global::Msg.LoginReq();
            }
            input.ReadMessage(loginReq_);
            break;
          }
          case 26: {
            if (loginRsp_ == null) {
              loginRsp_ = new global::Msg.LoginRsp();
            }
            input.ReadMessage(loginRsp_);
            break;
          }
          case 34: {
            if (kickNotify_ == null) {
              kickNotify_ = new global::Msg.KickNotify();
            }
            input.ReadMessage(kickNotify_);
            break;
          }
          case 42: {
            if (createRoomReq_ == null) {
              createRoomReq_ = new global::Msg.CreateRoomReq();
            }
            input.ReadMessage(createRoomReq_);
            break;
          }
          case 50: {
            if (createRoomRsp_ == null) {
              createRoomRsp_ = new global::Msg.CreateRoomRsp();
            }
            input.ReadMessage(createRoomRsp_);
            break;
          }
          case 58: {
            if (consumeDiamondsNotify_ == null) {
              consumeDiamondsNotify_ = new global::Msg.ConsumeDiamondsNotify();
            }
            input.ReadMessage(consumeDiamondsNotify_);
            break;
          }
          case 66: {
            if (joinRoomReq_ == null) {
              joinRoomReq_ = new global::Msg.JoinRoomReq();
            }
            input.ReadMessage(joinRoomReq_);
            break;
          }
          case 74: {
            if (joinRoomRsp_ == null) {
              joinRoomRsp_ = new global::Msg.JoinRoomRsp();
            }
            input.ReadMessage(joinRoomRsp_);
            break;
          }
          case 82: {
            if (joinRoomNotify_ == null) {
              joinRoomNotify_ = new global::Msg.JoinRoomNotify();
            }
            input.ReadMessage(joinRoomNotify_);
            break;
          }
          case 90: {
            if (leaveRoomReq_ == null) {
              leaveRoomReq_ = new global::Msg.LeaveRoomReq();
            }
            input.ReadMessage(leaveRoomReq_);
            break;
          }
          case 98: {
            if (leaveRoomRsp_ == null) {
              leaveRoomRsp_ = new global::Msg.LeaveRoomRsp();
            }
            input.ReadMessage(leaveRoomRsp_);
            break;
          }
          case 106: {
            if (leaveRoomNotify_ == null) {
              leaveRoomNotify_ = new global::Msg.LeaveRoomNotify();
            }
            input.ReadMessage(leaveRoomNotify_);
            break;
          }
          case 114: {
            if (sitDownReq_ == null) {
              sitDownReq_ = new global::Msg.SitDownReq();
            }
            input.ReadMessage(sitDownReq_);
            break;
          }
          case 122: {
            if (sitDownRsp_ == null) {
              sitDownRsp_ = new global::Msg.SitDownRsp();
            }
            input.ReadMessage(sitDownRsp_);
            break;
          }
          case 130: {
            if (sitDownNotify_ == null) {
              sitDownNotify_ = new global::Msg.SitDownNotify();
            }
            input.ReadMessage(sitDownNotify_);
            break;
          }
          case 138: {
            if (standUpReq_ == null) {
              standUpReq_ = new global::Msg.StandUpReq();
            }
            input.ReadMessage(standUpReq_);
            break;
          }
          case 146: {
            if (standUpRsp_ == null) {
              standUpRsp_ = new global::Msg.StandUpRsp();
            }
            input.ReadMessage(standUpRsp_);
            break;
          }
          case 154: {
            if (standUpNotify_ == null) {
              standUpNotify_ = new global::Msg.StandUpNotify();
            }
            input.ReadMessage(standUpNotify_);
            break;
          }
          case 186: {
            if (autoBankerReq_ == null) {
              autoBankerReq_ = new global::Msg.AutoBankerReq();
            }
            input.ReadMessage(autoBankerReq_);
            break;
          }
          case 194: {
            if (autoBankerRsp_ == null) {
              autoBankerRsp_ = new global::Msg.AutoBankerRsp();
            }
            input.ReadMessage(autoBankerRsp_);
            break;
          }
          case 202: {
            if (startGameReq_ == null) {
              startGameReq_ = new global::Msg.StartGameReq();
            }
            input.ReadMessage(startGameReq_);
            break;
          }
          case 210: {
            if (startGameRsp_ == null) {
              startGameRsp_ = new global::Msg.StartGameRsp();
            }
            input.ReadMessage(startGameRsp_);
            break;
          }
          case 218: {
            if (betReq_ == null) {
              betReq_ = new global::Msg.BetReq();
            }
            input.ReadMessage(betReq_);
            break;
          }
          case 226: {
            if (betRsp_ == null) {
              betRsp_ = new global::Msg.BetRsp();
            }
            input.ReadMessage(betRsp_);
            break;
          }
          case 234: {
            if (betNotify_ == null) {
              betNotify_ = new global::Msg.BetNotify();
            }
            input.ReadMessage(betNotify_);
            break;
          }
          case 242: {
            if (combineReq_ == null) {
              combineReq_ = new global::Msg.CombineReq();
            }
            input.ReadMessage(combineReq_);
            break;
          }
          case 250: {
            if (combineRsp_ == null) {
              combineRsp_ = new global::Msg.CombineRsp();
            }
            input.ReadMessage(combineRsp_);
            break;
          }
          case 258: {
            if (combineNotify_ == null) {
              combineNotify_ = new global::Msg.CombineNotify();
            }
            input.ReadMessage(combineNotify_);
            break;
          }
          case 274: {
            if (gameStateNotify_ == null) {
              gameStateNotify_ = new global::Msg.GameStateNotify();
            }
            input.ReadMessage(gameStateNotify_);
            break;
          }
          case 282: {
            if (disconnectNotify_ == null) {
              disconnectNotify_ = new global::Msg.DisconnectNotify();
            }
            input.ReadMessage(disconnectNotify_);
            break;
          }
          case 290: {
            if (reconnectNotify_ == null) {
              reconnectNotify_ = new global::Msg.ReconnectNotify();
            }
            input.ReadMessage(reconnectNotify_);
            break;
          }
          case 298: {
            if (getScoreboardReq_ == null) {
              getScoreboardReq_ = new global::Msg.GetScoreboardReq();
            }
            input.ReadMessage(getScoreboardReq_);
            break;
          }
          case 306: {
            if (getScoreboardRsp_ == null) {
              getScoreboardRsp_ = new global::Msg.GetScoreboardRsp();
            }
            input.ReadMessage(getScoreboardRsp_);
            break;
          }
          case 314: {
            if (getRoundHistoryReq_ == null) {
              getRoundHistoryReq_ = new global::Msg.GetRoundHistoryReq();
            }
            input.ReadMessage(getRoundHistoryReq_);
            break;
          }
          case 322: {
            if (getRoundHistoryRsp_ == null) {
              getRoundHistoryRsp_ = new global::Msg.GetRoundHistoryRsp();
            }
            input.ReadMessage(getRoundHistoryRsp_);
            break;
          }
          case 330: {
            if (listRoomsReq_ == null) {
              listRoomsReq_ = new global::Msg.ListRoomsReq();
            }
            input.ReadMessage(listRoomsReq_);
            break;
          }
          case 338: {
            if (listRoomsRsp_ == null) {
              listRoomsRsp_ = new global::Msg.ListRoomsRsp();
            }
            input.ReadMessage(listRoomsRsp_);
            break;
          }
          case 346: {
            if (closeRoomReq_ == null) {
              closeRoomReq_ = new global::Msg.CloseRoomReq();
            }
            input.ReadMessage(closeRoomReq_);
            break;
          }
          case 354: {
            if (closeRoomRsp_ == null) {
              closeRoomRsp_ = new global::Msg.CloseRoomRsp();
            }
            input.ReadMessage(closeRoomRsp_);
            break;
          }
          case 362: {
            if (getProfileReq_ == null) {
              getProfileReq_ = new global::Msg.GetProfileReq();
            }
            input.ReadMessage(getProfileReq_);
            break;
          }
          case 370: {
            if (getProfileRsp_ == null) {
              getProfileRsp_ = new global::Msg.GetProfileRsp();
            }
            input.ReadMessage(getProfileRsp_);
            break;
          }
          case 378: {
            if (diamondsRecordsReq_ == null) {
              diamondsRecordsReq_ = new global::Msg.DiamondsRecordsReq();
            }
            input.ReadMessage(diamondsRecordsReq_);
            break;
          }
          case 386: {
            if (diamondsRecordsRsp_ == null) {
              diamondsRecordsRsp_ = new global::Msg.DiamondsRecordsRsp();
            }
            input.ReadMessage(diamondsRecordsRsp_);
            break;
          }
          case 394: {
            if (sendDiamondsReq_ == null) {
              sendDiamondsReq_ = new global::Msg.SendDiamondsReq();
            }
            input.ReadMessage(sendDiamondsReq_);
            break;
          }
          case 402: {
            if (sendDiamondsRsp_ == null) {
              sendDiamondsRsp_ = new global::Msg.SendDiamondsRsp();
            }
            input.ReadMessage(sendDiamondsRsp_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginFBReq : pb::IMessage<LoginFBReq> {
    private static readonly pb::MessageParser<LoginFBReq> _parser = new pb::MessageParser<LoginFBReq>(() => new LoginFBReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginFBReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginFBReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginFBReq(LoginFBReq other) : this() {
      fbId_ = other.fbId_;
      token_ = other.token_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginFBReq Clone() {
      return new LoginFBReq(this);
    }

    /// <summary>Field number for the "fb_id" field.</summary>
    public const int FbIdFieldNumber = 1;
    private string fbId_ = "";
    /// <summary>
    /// facebook id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FbId {
      get { return fbId_; }
      set {
        fbId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    /// <summary>
    /// facebook token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginFBReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginFBReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FbId != other.FbId) return false;
      if (Token != other.Token) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FbId.Length != 0) hash ^= FbId.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FbId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FbId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FbId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FbId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginFBReq other) {
      if (other == null) {
        return;
      }
      if (other.FbId.Length != 0) {
        FbId = other.FbId;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FbId = input.ReadString();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginReq : pb::IMessage<LoginReq> {
    private static readonly pb::MessageParser<LoginReq> _parser = new pb::MessageParser<LoginReq>(() => new LoginReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginReq(LoginReq other) : this() {
      type_ = other.type_;
      Fb = other.fb_ != null ? other.Fb.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginReq Clone() {
      return new LoginReq(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Msg.LoginType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.LoginType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "fb" field.</summary>
    public const int FbFieldNumber = 2;
    private global::Msg.LoginFBReq fb_;
    /// <summary>
    /// facebook
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.LoginFBReq Fb {
      get { return fb_; }
      set {
        fb_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Fb, other.Fb)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (fb_ != null) hash ^= Fb.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (fb_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Fb);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (fb_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fb);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginReq other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.fb_ != null) {
        if (fb_ == null) {
          fb_ = new global::Msg.LoginFBReq();
        }
        Fb.MergeFrom(other.Fb);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Msg.LoginType) input.ReadEnum();
            break;
          }
          case 18: {
            if (fb_ == null) {
              fb_ = new global::Msg.LoginFBReq();
            }
            input.ReadMessage(fb_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginRsp : pb::IMessage<LoginRsp> {
    private static readonly pb::MessageParser<LoginRsp> _parser = new pb::MessageParser<LoginRsp>(() => new LoginRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRsp(LoginRsp other) : this() {
      ret_ = other.ret_;
      uid_ = other.uid_;
      name_ = other.name_;
      avatar_ = other.avatar_;
      roomNumber_ = other.roomNumber_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRsp Clone() {
      return new LoginRsp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private global::Msg.ErrorID ret_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ErrorID Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 4;
    private string avatar_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "room_number" field.</summary>
    public const int RoomNumberFieldNumber = 5;
    private string roomNumber_ = "";
    /// <summary>
    /// 如果用户在房间中，返回房间number，否则返回""
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomNumber {
      get { return roomNumber_; }
      set {
        roomNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      if (Avatar != other.Avatar) return false;
      if (RoomNumber != other.RoomNumber) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
      if (RoomNumber.Length != 0) hash ^= RoomNumber.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Ret);
      }
      if (Uid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Avatar);
      }
      if (RoomNumber.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RoomNumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ret);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (RoomNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomNumber);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRsp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Avatar.Length != 0) {
        Avatar = other.Avatar;
      }
      if (other.RoomNumber.Length != 0) {
        RoomNumber = other.RoomNumber;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ret_ = (global::Msg.ErrorID) input.ReadEnum();
            break;
          }
          case 16: {
            Uid = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Avatar = input.ReadString();
            break;
          }
          case 42: {
            RoomNumber = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetProfileReq : pb::IMessage<GetProfileReq> {
    private static readonly pb::MessageParser<GetProfileReq> _parser = new pb::MessageParser<GetProfileReq>(() => new GetProfileReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetProfileReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfileReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfileReq(GetProfileReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfileReq Clone() {
      return new GetProfileReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetProfileReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetProfileReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetProfileReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GetProfileRsp : pb::IMessage<GetProfileRsp> {
    private static readonly pb::MessageParser<GetProfileRsp> _parser = new pb::MessageParser<GetProfileRsp>(() => new GetProfileRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetProfileRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfileRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfileRsp(GetProfileRsp other) : this() {
      ret_ = other.ret_;
      uid_ = other.uid_;
      name_ = other.name_;
      signture_ = other.signture_;
      avatar_ = other.avatar_;
      diamonds_ = other.diamonds_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfileRsp Clone() {
      return new GetProfileRsp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private global::Msg.ErrorID ret_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ErrorID Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signture" field.</summary>
    public const int SigntureFieldNumber = 4;
    private string signture_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Signture {
      get { return signture_; }
      set {
        signture_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 5;
    private string avatar_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "diamonds" field.</summary>
    public const int DiamondsFieldNumber = 6;
    private uint diamonds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Diamonds {
      get { return diamonds_; }
      set {
        diamonds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetProfileRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetProfileRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      if (Signture != other.Signture) return false;
      if (Avatar != other.Avatar) return false;
      if (Diamonds != other.Diamonds) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Signture.Length != 0) hash ^= Signture.GetHashCode();
      if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
      if (Diamonds != 0) hash ^= Diamonds.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Ret);
      }
      if (Uid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Signture.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Signture);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Avatar);
      }
      if (Diamonds != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Diamonds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ret);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Signture.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Signture);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (Diamonds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Diamonds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetProfileRsp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Signture.Length != 0) {
        Signture = other.Signture;
      }
      if (other.Avatar.Length != 0) {
        Avatar = other.Avatar;
      }
      if (other.Diamonds != 0) {
        Diamonds = other.Diamonds;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ret_ = (global::Msg.ErrorID) input.ReadEnum();
            break;
          }
          case 16: {
            Uid = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Signture = input.ReadString();
            break;
          }
          case 42: {
            Avatar = input.ReadString();
            break;
          }
          case 48: {
            Diamonds = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DiamondsRecordsReq : pb::IMessage<DiamondsRecordsReq> {
    private static readonly pb::MessageParser<DiamondsRecordsReq> _parser = new pb::MessageParser<DiamondsRecordsReq>(() => new DiamondsRecordsReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiamondsRecordsReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiamondsRecordsReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiamondsRecordsReq(DiamondsRecordsReq other) : this() {
      beginTime_ = other.beginTime_;
      endTime_ = other.endTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiamondsRecordsReq Clone() {
      return new DiamondsRecordsReq(this);
    }

    /// <summary>Field number for the "begin_time" field.</summary>
    public const int BeginTimeFieldNumber = 1;
    private string beginTime_ = "";
    /// <summary>
    /// "2018-3-27"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BeginTime {
      get { return beginTime_; }
      set {
        beginTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private string endTime_ = "";
    /// <summary>
    /// "2018-3-28"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndTime {
      get { return endTime_; }
      set {
        endTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiamondsRecordsReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiamondsRecordsReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BeginTime != other.BeginTime) return false;
      if (EndTime != other.EndTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BeginTime.Length != 0) hash ^= BeginTime.GetHashCode();
      if (EndTime.Length != 0) hash ^= EndTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BeginTime.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BeginTime);
      }
      if (EndTime.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EndTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BeginTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BeginTime);
      }
      if (EndTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiamondsRecordsReq other) {
      if (other == null) {
        return;
      }
      if (other.BeginTime.Length != 0) {
        BeginTime = other.BeginTime;
      }
      if (other.EndTime.Length != 0) {
        EndTime = other.EndTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BeginTime = input.ReadString();
            break;
          }
          case 18: {
            EndTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DiamondsRecordsRsp : pb::IMessage<DiamondsRecordsRsp> {
    private static readonly pb::MessageParser<DiamondsRecordsRsp> _parser = new pb::MessageParser<DiamondsRecordsRsp>(() => new DiamondsRecordsRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiamondsRecordsRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiamondsRecordsRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiamondsRecordsRsp(DiamondsRecordsRsp other) : this() {
      ret_ = other.ret_;
      records_ = other.records_.Clone();
      users_ = other.users_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiamondsRecordsRsp Clone() {
      return new DiamondsRecordsRsp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private global::Msg.ErrorID ret_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ErrorID Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Msg.DiamondsRecordsItem> _repeated_records_codec
        = pb::FieldCodec.ForMessage(18, global::Msg.DiamondsRecordsItem.Parser);
    private readonly pbc::RepeatedField<global::Msg.DiamondsRecordsItem> records_ = new pbc::RepeatedField<global::Msg.DiamondsRecordsItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.DiamondsRecordsItem> Records {
      get { return records_; }
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Msg.UserNameAvatar> _repeated_users_codec
        = pb::FieldCodec.ForMessage(26, global::Msg.UserNameAvatar.Parser);
    private readonly pbc::RepeatedField<global::Msg.UserNameAvatar> users_ = new pbc::RepeatedField<global::Msg.UserNameAvatar>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.UserNameAvatar> Users {
      get { return users_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiamondsRecordsRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiamondsRecordsRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!records_.Equals(other.records_)) return false;
      if(!users_.Equals(other.users_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= records_.GetHashCode();
      hash ^= users_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Ret);
      }
      records_.WriteTo(output, _repeated_records_codec);
      users_.WriteTo(output, _repeated_users_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ret);
      }
      size += records_.CalculateSize(_repeated_records_codec);
      size += users_.CalculateSize(_repeated_users_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiamondsRecordsRsp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      records_.Add(other.records_);
      users_.Add(other.users_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ret_ = (global::Msg.ErrorID) input.ReadEnum();
            break;
          }
          case 18: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
          case 26: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DiamondsRecordsItem : pb::IMessage<DiamondsRecordsItem> {
    private static readonly pb::MessageParser<DiamondsRecordsItem> _parser = new pb::MessageParser<DiamondsRecordsItem>(() => new DiamondsRecordsItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiamondsRecordsItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiamondsRecordsItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiamondsRecordsItem(DiamondsRecordsItem other) : this() {
      time_ = other.time_;
      uid_ = other.uid_;
      diamonds_ = other.diamonds_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiamondsRecordsItem Clone() {
      return new DiamondsRecordsItem(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private uint time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "diamonds" field.</summary>
    public const int DiamondsFieldNumber = 3;
    private int diamonds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diamonds {
      get { return diamonds_; }
      set {
        diamonds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiamondsRecordsItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiamondsRecordsItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (Uid != other.Uid) return false;
      if (Diamonds != other.Diamonds) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0) hash ^= Time.GetHashCode();
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Diamonds != 0) hash ^= Diamonds.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Time);
      }
      if (Uid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Uid);
      }
      if (Diamonds != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Diamonds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Diamonds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diamonds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiamondsRecordsItem other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Diamonds != 0) {
        Diamonds = other.Diamonds;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Time = input.ReadUInt32();
            break;
          }
          case 16: {
            Uid = input.ReadUInt32();
            break;
          }
          case 24: {
            Diamonds = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserNameAvatar : pb::IMessage<UserNameAvatar> {
    private static readonly pb::MessageParser<UserNameAvatar> _parser = new pb::MessageParser<UserNameAvatar>(() => new UserNameAvatar());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserNameAvatar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserNameAvatar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserNameAvatar(UserNameAvatar other) : this() {
      uid_ = other.uid_;
      name_ = other.name_;
      avatar_ = other.avatar_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserNameAvatar Clone() {
      return new UserNameAvatar(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 3;
    private string avatar_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserNameAvatar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserNameAvatar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      if (Avatar != other.Avatar) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Avatar);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserNameAvatar other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Avatar.Length != 0) {
        Avatar = other.Avatar;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Avatar = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendDiamondsReq : pb::IMessage<SendDiamondsReq> {
    private static readonly pb::MessageParser<SendDiamondsReq> _parser = new pb::MessageParser<SendDiamondsReq>(() => new SendDiamondsReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendDiamondsReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendDiamondsReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendDiamondsReq(SendDiamondsReq other) : this() {
      uid_ = other.uid_;
      diamonds_ = other.diamonds_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendDiamondsReq Clone() {
      return new SendDiamondsReq(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "diamonds" field.</summary>
    public const int DiamondsFieldNumber = 2;
    private uint diamonds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Diamonds {
      get { return diamonds_; }
      set {
        diamonds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendDiamondsReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendDiamondsReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Diamonds != other.Diamonds) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Diamonds != 0) hash ^= Diamonds.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (Diamonds != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Diamonds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Diamonds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Diamonds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendDiamondsReq other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Diamonds != 0) {
        Diamonds = other.Diamonds;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            Diamonds = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendDiamondsRsp : pb::IMessage<SendDiamondsRsp> {
    private static readonly pb::MessageParser<SendDiamondsRsp> _parser = new pb::MessageParser<SendDiamondsRsp>(() => new SendDiamondsRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendDiamondsRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendDiamondsRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendDiamondsRsp(SendDiamondsRsp other) : this() {
      ret_ = other.ret_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendDiamondsRsp Clone() {
      return new SendDiamondsRsp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private global::Msg.ErrorID ret_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ErrorID Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendDiamondsRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendDiamondsRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendDiamondsRsp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ret_ = (global::Msg.ErrorID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// kick
  /// </summary>
  public sealed partial class KickNotify : pb::IMessage<KickNotify> {
    private static readonly pb::MessageParser<KickNotify> _parser = new pb::MessageParser<KickNotify>(() => new KickNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KickNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickNotify(KickNotify other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickNotify Clone() {
      return new KickNotify(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KickNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KickNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KickNotify other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// disconnect 
  /// </summary>
  public sealed partial class DisconnectNotify : pb::IMessage<DisconnectNotify> {
    private static readonly pb::MessageParser<DisconnectNotify> _parser = new pb::MessageParser<DisconnectNotify>(() => new DisconnectNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisconnectNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectNotify(DisconnectNotify other) : this() {
      uid_ = other.uid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectNotify Clone() {
      return new DisconnectNotify(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisconnectNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisconnectNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisconnectNotify other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// reconnect
  /// </summary>
  public sealed partial class ReconnectNotify : pb::IMessage<ReconnectNotify> {
    private static readonly pb::MessageParser<ReconnectNotify> _parser = new pb::MessageParser<ReconnectNotify>(() => new ReconnectNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReconnectNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReconnectNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReconnectNotify(ReconnectNotify other) : this() {
      uid_ = other.uid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReconnectNotify Clone() {
      return new ReconnectNotify(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReconnectNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReconnectNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReconnectNotify other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Create Room
  /// </summary>
  public sealed partial class CreateRoomReq : pb::IMessage<CreateRoomReq> {
    private static readonly pb::MessageParser<CreateRoomReq> _parser = new pb::MessageParser<CreateRoomReq>(() => new CreateRoomReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomReq(CreateRoomReq other) : this() {
      name_ = other.name_;
      minBet_ = other.minBet_;
      maxBet_ = other.maxBet_;
      hands_ = other.hands_;
      creditPoints_ = other.creditPoints_;
      isShare_ = other.isShare_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomReq Clone() {
      return new CreateRoomReq(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 房间名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "min_bet" field.</summary>
    public const int MinBetFieldNumber = 2;
    private uint minBet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinBet {
      get { return minBet_; }
      set {
        minBet_ = value;
      }
    }

    /// <summary>Field number for the "max_bet" field.</summary>
    public const int MaxBetFieldNumber = 3;
    private uint maxBet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxBet {
      get { return maxBet_; }
      set {
        maxBet_ = value;
      }
    }

    /// <summary>Field number for the "hands" field.</summary>
    public const int HandsFieldNumber = 4;
    private uint hands_;
    /// <summary>
    /// 0 - 不限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hands {
      get { return hands_; }
      set {
        hands_ = value;
      }
    }

    /// <summary>Field number for the "credit_points" field.</summary>
    public const int CreditPointsFieldNumber = 5;
    private uint creditPoints_;
    /// <summary>
    /// 0 - 不限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreditPoints {
      get { return creditPoints_; }
      set {
        creditPoints_ = value;
      }
    }

    /// <summary>Field number for the "is_share" field.</summary>
    public const int IsShareFieldNumber = 6;
    private bool isShare_;
    /// <summary>
    /// 是否为aa制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShare {
      get { return isShare_; }
      set {
        isShare_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (MinBet != other.MinBet) return false;
      if (MaxBet != other.MaxBet) return false;
      if (Hands != other.Hands) return false;
      if (CreditPoints != other.CreditPoints) return false;
      if (IsShare != other.IsShare) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (MinBet != 0) hash ^= MinBet.GetHashCode();
      if (MaxBet != 0) hash ^= MaxBet.GetHashCode();
      if (Hands != 0) hash ^= Hands.GetHashCode();
      if (CreditPoints != 0) hash ^= CreditPoints.GetHashCode();
      if (IsShare != false) hash ^= IsShare.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (MinBet != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MinBet);
      }
      if (MaxBet != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxBet);
      }
      if (Hands != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Hands);
      }
      if (CreditPoints != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CreditPoints);
      }
      if (IsShare != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsShare);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MinBet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinBet);
      }
      if (MaxBet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxBet);
      }
      if (Hands != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hands);
      }
      if (CreditPoints != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreditPoints);
      }
      if (IsShare != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateRoomReq other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.MinBet != 0) {
        MinBet = other.MinBet;
      }
      if (other.MaxBet != 0) {
        MaxBet = other.MaxBet;
      }
      if (other.Hands != 0) {
        Hands = other.Hands;
      }
      if (other.CreditPoints != 0) {
        CreditPoints = other.CreditPoints;
      }
      if (other.IsShare != false) {
        IsShare = other.IsShare;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            MinBet = input.ReadUInt32();
            break;
          }
          case 24: {
            MaxBet = input.ReadUInt32();
            break;
          }
          case 32: {
            Hands = input.ReadUInt32();
            break;
          }
          case 40: {
            CreditPoints = input.ReadUInt32();
            break;
          }
          case 48: {
            IsShare = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateRoomRsp : pb::IMessage<CreateRoomRsp> {
    private static readonly pb::MessageParser<CreateRoomRsp> _parser = new pb::MessageParser<CreateRoomRsp>(() => new CreateRoomRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateRoomRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomRsp(CreateRoomRsp other) : this() {
      ret_ = other.ret_;
      roomId_ = other.roomId_;
      roomNumber_ = other.roomNumber_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomRsp Clone() {
      return new CreateRoomRsp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private global::Msg.ErrorID ret_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ErrorID Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private uint roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "room_number" field.</summary>
    public const int RoomNumberFieldNumber = 3;
    private string roomNumber_ = "";
    /// <summary>
    /// 房号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomNumber {
      get { return roomNumber_; }
      set {
        roomNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateRoomRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateRoomRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (RoomId != other.RoomId) return false;
      if (RoomNumber != other.RoomNumber) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (RoomNumber.Length != 0) hash ^= RoomNumber.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Ret);
      }
      if (RoomId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RoomId);
      }
      if (RoomNumber.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RoomNumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ret);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomId);
      }
      if (RoomNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomNumber);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateRoomRsp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.RoomNumber.Length != 0) {
        RoomNumber = other.RoomNumber;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ret_ = (global::Msg.ErrorID) input.ReadEnum();
            break;
          }
          case 16: {
            RoomId = input.ReadUInt32();
            break;
          }
          case 26: {
            RoomNumber = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// List Rooms 请求房间列表
  /// </summary>
  public sealed partial class ListRoomsReq : pb::IMessage<ListRoomsReq> {
    private static readonly pb::MessageParser<ListRoomsReq> _parser = new pb::MessageParser<ListRoomsReq>(() => new ListRoomsReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListRoomsReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRoomsReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRoomsReq(ListRoomsReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRoomsReq Clone() {
      return new ListRoomsReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListRoomsReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListRoomsReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListRoomsReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 返回结果
  /// </summary>
  public sealed partial class ListRoomsRsp : pb::IMessage<ListRoomsRsp> {
    private static readonly pb::MessageParser<ListRoomsRsp> _parser = new pb::MessageParser<ListRoomsRsp>(() => new ListRoomsRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListRoomsRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRoomsRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRoomsRsp(ListRoomsRsp other) : this() {
      ret_ = other.ret_;
      rooms_ = other.rooms_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRoomsRsp Clone() {
      return new ListRoomsRsp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private global::Msg.ErrorID ret_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ErrorID Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "rooms" field.</summary>
    public const int RoomsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Msg.ListRoomItem> _repeated_rooms_codec
        = pb::FieldCodec.ForMessage(18, global::Msg.ListRoomItem.Parser);
    private readonly pbc::RepeatedField<global::Msg.ListRoomItem> rooms_ = new pbc::RepeatedField<global::Msg.ListRoomItem>();
    /// <summary>
    /// rooms
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ListRoomItem> Rooms {
      get { return rooms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListRoomsRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListRoomsRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!rooms_.Equals(other.rooms_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= rooms_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Ret);
      }
      rooms_.WriteTo(output, _repeated_rooms_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ret);
      }
      size += rooms_.CalculateSize(_repeated_rooms_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListRoomsRsp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      rooms_.Add(other.rooms_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ret_ = (global::Msg.ErrorID) input.ReadEnum();
            break;
          }
          case 18: {
            rooms_.AddEntriesFrom(input, _repeated_rooms_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListRoomItem : pb::IMessage<ListRoomItem> {
    private static readonly pb::MessageParser<ListRoomItem> _parser = new pb::MessageParser<ListRoomItem>(() => new ListRoomItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListRoomItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRoomItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRoomItem(ListRoomItem other) : this() {
      roomId_ = other.roomId_;
      roomNumber_ = other.roomNumber_;
      roomName_ = other.roomName_;
      ownerUid_ = other.ownerUid_;
      hands_ = other.hands_;
      playedHands_ = other.playedHands_;
      players_ = other.players_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRoomItem Clone() {
      return new ListRoomItem(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private uint roomId_;
    /// <summary>
    /// room id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "room_number" field.</summary>
    public const int RoomNumberFieldNumber = 2;
    private string roomNumber_ = "";
    /// <summary>
    /// room number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomNumber {
      get { return roomNumber_; }
      set {
        roomNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "room_name" field.</summary>
    public const int RoomNameFieldNumber = 3;
    private string roomName_ = "";
    /// <summary>
    /// room name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner_uid" field.</summary>
    public const int OwnerUidFieldNumber = 4;
    private uint ownerUid_;
    /// <summary>
    /// 创建者uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OwnerUid {
      get { return ownerUid_; }
      set {
        ownerUid_ = value;
      }
    }

    /// <summary>Field number for the "hands" field.</summary>
    public const int HandsFieldNumber = 5;
    private uint hands_;
    /// <summary>
    /// 最大局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hands {
      get { return hands_; }
      set {
        hands_ = value;
      }
    }

    /// <summary>Field number for the "played_hands" field.</summary>
    public const int PlayedHandsFieldNumber = 6;
    private uint playedHands_;
    /// <summary>
    /// 进行了的局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayedHands {
      get { return playedHands_; }
      set {
        playedHands_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Msg.ListRoomPlayerInfo> _repeated_players_codec
        = pb::FieldCodec.ForMessage(58, global::Msg.ListRoomPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ListRoomPlayerInfo> players_ = new pbc::RepeatedField<global::Msg.ListRoomPlayerInfo>();
    /// <summary>
    /// 座位上的玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ListRoomPlayerInfo> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListRoomItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListRoomItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (RoomNumber != other.RoomNumber) return false;
      if (RoomName != other.RoomName) return false;
      if (OwnerUid != other.OwnerUid) return false;
      if (Hands != other.Hands) return false;
      if (PlayedHands != other.PlayedHands) return false;
      if(!players_.Equals(other.players_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (RoomNumber.Length != 0) hash ^= RoomNumber.GetHashCode();
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      if (OwnerUid != 0) hash ^= OwnerUid.GetHashCode();
      if (Hands != 0) hash ^= Hands.GetHashCode();
      if (PlayedHands != 0) hash ^= PlayedHands.GetHashCode();
      hash ^= players_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoomId);
      }
      if (RoomNumber.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomNumber);
      }
      if (RoomName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RoomName);
      }
      if (OwnerUid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(OwnerUid);
      }
      if (Hands != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Hands);
      }
      if (PlayedHands != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(PlayedHands);
      }
      players_.WriteTo(output, _repeated_players_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomId);
      }
      if (RoomNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomNumber);
      }
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (OwnerUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OwnerUid);
      }
      if (Hands != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hands);
      }
      if (PlayedHands != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayedHands);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListRoomItem other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.RoomNumber.Length != 0) {
        RoomNumber = other.RoomNumber;
      }
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
      if (other.OwnerUid != 0) {
        OwnerUid = other.OwnerUid;
      }
      if (other.Hands != 0) {
        Hands = other.Hands;
      }
      if (other.PlayedHands != 0) {
        PlayedHands = other.PlayedHands;
      }
      players_.Add(other.players_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadUInt32();
            break;
          }
          case 18: {
            RoomNumber = input.ReadString();
            break;
          }
          case 26: {
            RoomName = input.ReadString();
            break;
          }
          case 32: {
            OwnerUid = input.ReadUInt32();
            break;
          }
          case 40: {
            Hands = input.ReadUInt32();
            break;
          }
          case 48: {
            PlayedHands = input.ReadUInt32();
            break;
          }
          case 58: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListRoomPlayerInfo : pb::IMessage<ListRoomPlayerInfo> {
    private static readonly pb::MessageParser<ListRoomPlayerInfo> _parser = new pb::MessageParser<ListRoomPlayerInfo>(() => new ListRoomPlayerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListRoomPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRoomPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRoomPlayerInfo(ListRoomPlayerInfo other) : this() {
      seatId_ = other.seatId_;
      name_ = other.name_;
      avatar_ = other.avatar_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRoomPlayerInfo Clone() {
      return new ListRoomPlayerInfo(this);
    }

    /// <summary>Field number for the "seat_id" field.</summary>
    public const int SeatIdFieldNumber = 1;
    private uint seatId_;
    /// <summary>
    /// 座位号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 玩家姓名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 3;
    private string avatar_ = "";
    /// <summary>
    /// 玩家头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListRoomPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListRoomPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeatId != other.SeatId) return false;
      if (Name != other.Name) return false;
      if (Avatar != other.Avatar) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SeatId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Avatar);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeatId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListRoomPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Avatar.Length != 0) {
        Avatar = other.Avatar;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatId = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Avatar = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 关闭房间
  /// </summary>
  public sealed partial class CloseRoomReq : pb::IMessage<CloseRoomReq> {
    private static readonly pb::MessageParser<CloseRoomReq> _parser = new pb::MessageParser<CloseRoomReq>(() => new CloseRoomReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseRoomReq(CloseRoomReq other) : this() {
      roomId_ = other.roomId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseRoomReq Clone() {
      return new CloseRoomReq(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private uint roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoomId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseRoomReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CloseRoomRsp : pb::IMessage<CloseRoomRsp> {
    private static readonly pb::MessageParser<CloseRoomRsp> _parser = new pb::MessageParser<CloseRoomRsp>(() => new CloseRoomRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseRoomRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseRoomRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseRoomRsp(CloseRoomRsp other) : this() {
      ret_ = other.ret_;
      roomId_ = other.roomId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseRoomRsp Clone() {
      return new CloseRoomRsp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private global::Msg.ErrorID ret_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ErrorID Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private uint roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseRoomRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseRoomRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (RoomId != other.RoomId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Ret);
      }
      if (RoomId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RoomId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ret);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseRoomRsp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ret_ = (global::Msg.ErrorID) input.ReadEnum();
            break;
          }
          case 16: {
            RoomId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Consume Diamonds Notify
  /// </summary>
  public sealed partial class ConsumeDiamondsNotify : pb::IMessage<ConsumeDiamondsNotify> {
    private static readonly pb::MessageParser<ConsumeDiamondsNotify> _parser = new pb::MessageParser<ConsumeDiamondsNotify>(() => new ConsumeDiamondsNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConsumeDiamondsNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsumeDiamondsNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsumeDiamondsNotify(ConsumeDiamondsNotify other) : this() {
      diamonds_ = other.diamonds_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsumeDiamondsNotify Clone() {
      return new ConsumeDiamondsNotify(this);
    }

    /// <summary>Field number for the "diamonds" field.</summary>
    public const int DiamondsFieldNumber = 1;
    private uint diamonds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Diamonds {
      get { return diamonds_; }
      set {
        diamonds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConsumeDiamondsNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConsumeDiamondsNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Diamonds != other.Diamonds) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Diamonds != 0) hash ^= Diamonds.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Diamonds != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Diamonds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Diamonds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Diamonds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConsumeDiamondsNotify other) {
      if (other == null) {
        return;
      }
      if (other.Diamonds != 0) {
        Diamonds = other.Diamonds;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Diamonds = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// join room
  /// </summary>
  public sealed partial class Player : pb::IMessage<Player> {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      uid_ = other.uid_;
      name_ = other.name_;
      avatar_ = other.avatar_;
      seatId_ = other.seatId_;
      bet_ = other.bet_;
      score_ = other.score_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    /// uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 3;
    private string avatar_ = "";
    /// <summary>
    /// 头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seat_id" field.</summary>
    public const int SeatIdFieldNumber = 4;
    private int seatId_;
    /// <summary>
    /// 座位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 5;
    private uint bet_;
    /// <summary>
    /// 已下注额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 6;
    private int score_;
    /// <summary>
    /// 积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      if (Avatar != other.Avatar) return false;
      if (SeatId != other.SeatId) return false;
      if (Bet != other.Bet) return false;
      if (Score != other.Score) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      if (Bet != 0) hash ^= Bet.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Avatar);
      }
      if (SeatId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SeatId);
      }
      if (Bet != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Bet);
      }
      if (Score != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
      }
      if (Bet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Bet);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Avatar.Length != 0) {
        Avatar = other.Avatar;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
      if (other.Bet != 0) {
        Bet = other.Bet;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Avatar = input.ReadString();
            break;
          }
          case 32: {
            SeatId = input.ReadInt32();
            break;
          }
          case 40: {
            Bet = input.ReadUInt32();
            break;
          }
          case 48: {
            Score = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Room : pb::IMessage<Room> {
    private static readonly pb::MessageParser<Room> _parser = new pb::MessageParser<Room>(() => new Room());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Room> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room(Room other) : this() {
      roomId_ = other.roomId_;
      number_ = other.number_;
      name_ = other.name_;
      minBet_ = other.minBet_;
      maxBet_ = other.maxBet_;
      hands_ = other.hands_;
      playedHands_ = other.playedHands_;
      creditPoints_ = other.creditPoints_;
      isShare_ = other.isShare_;
      players_ = other.players_.Clone();
      state_ = other.state_;
      countdown_ = other.countdown_;
      cards_ = other.cards_.Clone();
      result_ = other.result_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room Clone() {
      return new Room(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private uint roomId_;
    /// <summary>
    /// room id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 2;
    private string number_ = "";
    /// <summary>
    /// room number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Number {
      get { return number_; }
      set {
        number_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// room name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "min_bet" field.</summary>
    public const int MinBetFieldNumber = 4;
    private uint minBet_;
    /// <summary>
    /// min bet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinBet {
      get { return minBet_; }
      set {
        minBet_ = value;
      }
    }

    /// <summary>Field number for the "max_bet" field.</summary>
    public const int MaxBetFieldNumber = 5;
    private uint maxBet_;
    /// <summary>
    /// max bet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxBet {
      get { return maxBet_; }
      set {
        maxBet_ = value;
      }
    }

    /// <summary>Field number for the "hands" field.</summary>
    public const int HandsFieldNumber = 6;
    private uint hands_;
    /// <summary>
    /// 总局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hands {
      get { return hands_; }
      set {
        hands_ = value;
      }
    }

    /// <summary>Field number for the "played_hands" field.</summary>
    public const int PlayedHandsFieldNumber = 7;
    private uint playedHands_;
    /// <summary>
    /// 已经进行的局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayedHands {
      get { return playedHands_; }
      set {
        playedHands_ = value;
      }
    }

    /// <summary>Field number for the "credit_points" field.</summary>
    public const int CreditPointsFieldNumber = 8;
    private uint creditPoints_;
    /// <summary>
    /// credit points
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreditPoints {
      get { return creditPoints_; }
      set {
        creditPoints_ = value;
      }
    }

    /// <summary>Field number for the "is_share" field.</summary>
    public const int IsShareFieldNumber = 9;
    private bool isShare_;
    /// <summary>
    /// aa制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShare {
      get { return isShare_; }
      set {
        isShare_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Msg.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(82, global::Msg.Player.Parser);
    private readonly pbc::RepeatedField<global::Msg.Player> players_ = new pbc::RepeatedField<global::Msg.Player>();
    /// <summary>
    /// all players
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.Player> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 11;
    private global::Msg.GameState state_ = 0;
    /// <summary>
    /// 游戏状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.GameState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "countdown" field.</summary>
    public const int CountdownFieldNumber = 12;
    private int countdown_;
    /// <summary>
    /// 状态倒计时, ms, -1为无倒计时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Countdown {
      get { return countdown_; }
      set {
        countdown_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 13;
    private static readonly pb::FieldCodec<uint> _repeated_cards_codec
        = pb::FieldCodec.ForUInt32(106);
    private readonly pbc::RepeatedField<uint> cards_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 自己的手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Msg.SeatResult> _repeated_result_codec
        = pb::FieldCodec.ForMessage(114, global::Msg.SeatResult.Parser);
    private readonly pbc::RepeatedField<global::Msg.SeatResult> result_ = new pbc::RepeatedField<global::Msg.SeatResult>();
    /// <summary>
    /// 结算结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.SeatResult> Result {
      get { return result_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Room);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Room other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (Number != other.Number) return false;
      if (Name != other.Name) return false;
      if (MinBet != other.MinBet) return false;
      if (MaxBet != other.MaxBet) return false;
      if (Hands != other.Hands) return false;
      if (PlayedHands != other.PlayedHands) return false;
      if (CreditPoints != other.CreditPoints) return false;
      if (IsShare != other.IsShare) return false;
      if(!players_.Equals(other.players_)) return false;
      if (State != other.State) return false;
      if (Countdown != other.Countdown) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if(!result_.Equals(other.result_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (Number.Length != 0) hash ^= Number.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (MinBet != 0) hash ^= MinBet.GetHashCode();
      if (MaxBet != 0) hash ^= MaxBet.GetHashCode();
      if (Hands != 0) hash ^= Hands.GetHashCode();
      if (PlayedHands != 0) hash ^= PlayedHands.GetHashCode();
      if (CreditPoints != 0) hash ^= CreditPoints.GetHashCode();
      if (IsShare != false) hash ^= IsShare.GetHashCode();
      hash ^= players_.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (Countdown != 0) hash ^= Countdown.GetHashCode();
      hash ^= cards_.GetHashCode();
      hash ^= result_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoomId);
      }
      if (Number.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Number);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (MinBet != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MinBet);
      }
      if (MaxBet != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MaxBet);
      }
      if (Hands != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Hands);
      }
      if (PlayedHands != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(PlayedHands);
      }
      if (CreditPoints != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(CreditPoints);
      }
      if (IsShare != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsShare);
      }
      players_.WriteTo(output, _repeated_players_codec);
      if (State != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) State);
      }
      if (Countdown != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Countdown);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      result_.WriteTo(output, _repeated_result_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomId);
      }
      if (Number.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Number);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MinBet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinBet);
      }
      if (MaxBet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxBet);
      }
      if (Hands != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hands);
      }
      if (PlayedHands != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayedHands);
      }
      if (CreditPoints != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreditPoints);
      }
      if (IsShare != false) {
        size += 1 + 1;
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (Countdown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Countdown);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      size += result_.CalculateSize(_repeated_result_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Room other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.Number.Length != 0) {
        Number = other.Number;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.MinBet != 0) {
        MinBet = other.MinBet;
      }
      if (other.MaxBet != 0) {
        MaxBet = other.MaxBet;
      }
      if (other.Hands != 0) {
        Hands = other.Hands;
      }
      if (other.PlayedHands != 0) {
        PlayedHands = other.PlayedHands;
      }
      if (other.CreditPoints != 0) {
        CreditPoints = other.CreditPoints;
      }
      if (other.IsShare != false) {
        IsShare = other.IsShare;
      }
      players_.Add(other.players_);
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Countdown != 0) {
        Countdown = other.Countdown;
      }
      cards_.Add(other.cards_);
      result_.Add(other.result_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadUInt32();
            break;
          }
          case 18: {
            Number = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            MinBet = input.ReadUInt32();
            break;
          }
          case 40: {
            MaxBet = input.ReadUInt32();
            break;
          }
          case 48: {
            Hands = input.ReadUInt32();
            break;
          }
          case 56: {
            PlayedHands = input.ReadUInt32();
            break;
          }
          case 64: {
            CreditPoints = input.ReadUInt32();
            break;
          }
          case 72: {
            IsShare = input.ReadBool();
            break;
          }
          case 82: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 88: {
            state_ = (global::Msg.GameState) input.ReadEnum();
            break;
          }
          case 96: {
            Countdown = input.ReadInt32();
            break;
          }
          case 106:
          case 104: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 114: {
            result_.AddEntriesFrom(input, _repeated_result_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinRoomReq : pb::IMessage<JoinRoomReq> {
    private static readonly pb::MessageParser<JoinRoomReq> _parser = new pb::MessageParser<JoinRoomReq>(() => new JoinRoomReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomReq(JoinRoomReq other) : this() {
      roomNumber_ = other.roomNumber_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomReq Clone() {
      return new JoinRoomReq(this);
    }

    /// <summary>Field number for the "room_number" field.</summary>
    public const int RoomNumberFieldNumber = 1;
    private string roomNumber_ = "";
    /// <summary>
    /// 房号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomNumber {
      get { return roomNumber_; }
      set {
        roomNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomNumber != other.RoomNumber) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomNumber.Length != 0) hash ^= RoomNumber.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomNumber.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomNumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomNumber);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinRoomReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomNumber.Length != 0) {
        RoomNumber = other.RoomNumber;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RoomNumber = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinRoomRsp : pb::IMessage<JoinRoomRsp> {
    private static readonly pb::MessageParser<JoinRoomRsp> _parser = new pb::MessageParser<JoinRoomRsp>(() => new JoinRoomRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinRoomRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomRsp(JoinRoomRsp other) : this() {
      ret_ = other.ret_;
      Room = other.room_ != null ? other.Room.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomRsp Clone() {
      return new JoinRoomRsp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private global::Msg.ErrorID ret_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ErrorID Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 2;
    private global::Msg.Room room_;
    /// <summary>
    /// 房间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Room Room {
      get { return room_; }
      set {
        room_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinRoomRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinRoomRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(Room, other.Room)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (room_ != null) hash ^= Room.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Ret);
      }
      if (room_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Room);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ret);
      }
      if (room_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinRoomRsp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.room_ != null) {
        if (room_ == null) {
          room_ = new global::Msg.Room();
        }
        Room.MergeFrom(other.Room);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ret_ = (global::Msg.ErrorID) input.ReadEnum();
            break;
          }
          case 18: {
            if (room_ == null) {
              room_ = new global::Msg.Room();
            }
            input.ReadMessage(room_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinRoomNotify : pb::IMessage<JoinRoomNotify> {
    private static readonly pb::MessageParser<JoinRoomNotify> _parser = new pb::MessageParser<JoinRoomNotify>(() => new JoinRoomNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinRoomNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomNotify(JoinRoomNotify other) : this() {
      uid_ = other.uid_;
      name_ = other.name_;
      avatar_ = other.avatar_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomNotify Clone() {
      return new JoinRoomNotify(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 3;
    private string avatar_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinRoomNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinRoomNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      if (Avatar != other.Avatar) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Avatar);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinRoomNotify other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Avatar.Length != 0) {
        Avatar = other.Avatar;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Avatar = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// leave room
  /// </summary>
  public sealed partial class LeaveRoomReq : pb::IMessage<LeaveRoomReq> {
    private static readonly pb::MessageParser<LeaveRoomReq> _parser = new pb::MessageParser<LeaveRoomReq>(() => new LeaveRoomReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomReq(LeaveRoomReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomReq Clone() {
      return new LeaveRoomReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveRoomReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class LeaveRoomRsp : pb::IMessage<LeaveRoomRsp> {
    private static readonly pb::MessageParser<LeaveRoomRsp> _parser = new pb::MessageParser<LeaveRoomRsp>(() => new LeaveRoomRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveRoomRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomRsp(LeaveRoomRsp other) : this() {
      ret_ = other.ret_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomRsp Clone() {
      return new LeaveRoomRsp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private global::Msg.ErrorID ret_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ErrorID Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveRoomRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveRoomRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveRoomRsp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ret_ = (global::Msg.ErrorID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaveRoomNotify : pb::IMessage<LeaveRoomNotify> {
    private static readonly pb::MessageParser<LeaveRoomNotify> _parser = new pb::MessageParser<LeaveRoomNotify>(() => new LeaveRoomNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveRoomNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomNotify(LeaveRoomNotify other) : this() {
      uid_ = other.uid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomNotify Clone() {
      return new LeaveRoomNotify(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveRoomNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveRoomNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveRoomNotify other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// sit down
  /// </summary>
  public sealed partial class SitDownReq : pb::IMessage<SitDownReq> {
    private static readonly pb::MessageParser<SitDownReq> _parser = new pb::MessageParser<SitDownReq>(() => new SitDownReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SitDownReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SitDownReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SitDownReq(SitDownReq other) : this() {
      seatId_ = other.seatId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SitDownReq Clone() {
      return new SitDownReq(this);
    }

    /// <summary>Field number for the "seat_id" field.</summary>
    public const int SeatIdFieldNumber = 1;
    private uint seatId_;
    /// <summary>
    /// 座位号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SitDownReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SitDownReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeatId != other.SeatId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SeatId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeatId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SitDownReq other) {
      if (other == null) {
        return;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SitDownRsp : pb::IMessage<SitDownRsp> {
    private static readonly pb::MessageParser<SitDownRsp> _parser = new pb::MessageParser<SitDownRsp>(() => new SitDownRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SitDownRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SitDownRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SitDownRsp(SitDownRsp other) : this() {
      ret_ = other.ret_;
      autobanker_ = other.autobanker_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SitDownRsp Clone() {
      return new SitDownRsp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private global::Msg.ErrorID ret_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ErrorID Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "autobanker" field.</summary>
    public const int AutobankerFieldNumber = 2;
    private bool autobanker_;
    /// <summary>
    /// 庄家入座时, 返回autobanker的值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Autobanker {
      get { return autobanker_; }
      set {
        autobanker_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SitDownRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SitDownRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Autobanker != other.Autobanker) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Autobanker != false) hash ^= Autobanker.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Ret);
      }
      if (Autobanker != false) {
        output.WriteRawTag(16);
        output.WriteBool(Autobanker);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ret);
      }
      if (Autobanker != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SitDownRsp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Autobanker != false) {
        Autobanker = other.Autobanker;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ret_ = (global::Msg.ErrorID) input.ReadEnum();
            break;
          }
          case 16: {
            Autobanker = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SitDownNotify : pb::IMessage<SitDownNotify> {
    private static readonly pb::MessageParser<SitDownNotify> _parser = new pb::MessageParser<SitDownNotify>(() => new SitDownNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SitDownNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SitDownNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SitDownNotify(SitDownNotify other) : this() {
      type_ = other.type_;
      uid_ = other.uid_;
      seatId_ = other.seatId_;
      oldSeatId_ = other.oldSeatId_;
      score_ = other.score_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SitDownNotify Clone() {
      return new SitDownNotify(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Msg.SitDownType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.SitDownType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "seat_id" field.</summary>
    public const int SeatIdFieldNumber = 3;
    private uint seatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    /// <summary>Field number for the "old_seat_id" field.</summary>
    public const int OldSeatIdFieldNumber = 4;
    private int oldSeatId_;
    /// <summary>
    /// 如果是swap，则表示之前的座位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OldSeatId {
      get { return oldSeatId_; }
      set {
        oldSeatId_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 5;
    private int score_;
    /// <summary>
    /// 积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SitDownNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SitDownNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Uid != other.Uid) return false;
      if (SeatId != other.SeatId) return false;
      if (OldSeatId != other.OldSeatId) return false;
      if (Score != other.Score) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      if (OldSeatId != 0) hash ^= OldSeatId.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Uid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Uid);
      }
      if (SeatId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SeatId);
      }
      if (OldSeatId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OldSeatId);
      }
      if (Score != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeatId);
      }
      if (OldSeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OldSeatId);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SitDownNotify other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
      if (other.OldSeatId != 0) {
        OldSeatId = other.OldSeatId;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Msg.SitDownType) input.ReadEnum();
            break;
          }
          case 16: {
            Uid = input.ReadUInt32();
            break;
          }
          case 24: {
            SeatId = input.ReadUInt32();
            break;
          }
          case 32: {
            OldSeatId = input.ReadInt32();
            break;
          }
          case 40: {
            Score = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// stand up
  /// </summary>
  public sealed partial class StandUpReq : pb::IMessage<StandUpReq> {
    private static readonly pb::MessageParser<StandUpReq> _parser = new pb::MessageParser<StandUpReq>(() => new StandUpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StandUpReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandUpReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandUpReq(StandUpReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandUpReq Clone() {
      return new StandUpReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StandUpReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StandUpReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StandUpReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class StandUpRsp : pb::IMessage<StandUpRsp> {
    private static readonly pb::MessageParser<StandUpRsp> _parser = new pb::MessageParser<StandUpRsp>(() => new StandUpRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StandUpRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandUpRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandUpRsp(StandUpRsp other) : this() {
      ret_ = other.ret_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandUpRsp Clone() {
      return new StandUpRsp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private global::Msg.ErrorID ret_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ErrorID Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StandUpRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StandUpRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StandUpRsp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ret_ = (global::Msg.ErrorID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StandUpNotify : pb::IMessage<StandUpNotify> {
    private static readonly pb::MessageParser<StandUpNotify> _parser = new pb::MessageParser<StandUpNotify>(() => new StandUpNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StandUpNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandUpNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandUpNotify(StandUpNotify other) : this() {
      uid_ = other.uid_;
      seatId_ = other.seatId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandUpNotify Clone() {
      return new StandUpNotify(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "seat_id" field.</summary>
    public const int SeatIdFieldNumber = 2;
    private uint seatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StandUpNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StandUpNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (SeatId != other.SeatId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (SeatId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SeatId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeatId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StandUpNotify other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            SeatId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// auto banker
  /// </summary>
  public sealed partial class AutoBankerReq : pb::IMessage<AutoBankerReq> {
    private static readonly pb::MessageParser<AutoBankerReq> _parser = new pb::MessageParser<AutoBankerReq>(() => new AutoBankerReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AutoBankerReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoBankerReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoBankerReq(AutoBankerReq other) : this() {
      autoBanker_ = other.autoBanker_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoBankerReq Clone() {
      return new AutoBankerReq(this);
    }

    /// <summary>Field number for the "auto_banker" field.</summary>
    public const int AutoBankerFieldNumber = 1;
    private bool autoBanker_;
    /// <summary>
    /// true为自动连庄, false为取消
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoBanker {
      get { return autoBanker_; }
      set {
        autoBanker_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AutoBankerReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AutoBankerReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutoBanker != other.AutoBanker) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AutoBanker != false) hash ^= AutoBanker.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AutoBanker != false) {
        output.WriteRawTag(8);
        output.WriteBool(AutoBanker);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AutoBanker != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AutoBankerReq other) {
      if (other == null) {
        return;
      }
      if (other.AutoBanker != false) {
        AutoBanker = other.AutoBanker;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AutoBanker = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AutoBankerRsp : pb::IMessage<AutoBankerRsp> {
    private static readonly pb::MessageParser<AutoBankerRsp> _parser = new pb::MessageParser<AutoBankerRsp>(() => new AutoBankerRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AutoBankerRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoBankerRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoBankerRsp(AutoBankerRsp other) : this() {
      ret_ = other.ret_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoBankerRsp Clone() {
      return new AutoBankerRsp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private global::Msg.ErrorID ret_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ErrorID Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AutoBankerRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AutoBankerRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AutoBankerRsp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ret_ = (global::Msg.ErrorID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// start game
  /// </summary>
  public sealed partial class StartGameReq : pb::IMessage<StartGameReq> {
    private static readonly pb::MessageParser<StartGameReq> _parser = new pb::MessageParser<StartGameReq>(() => new StartGameReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartGameReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGameReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGameReq(StartGameReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGameReq Clone() {
      return new StartGameReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartGameReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartGameReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartGameReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class StartGameRsp : pb::IMessage<StartGameRsp> {
    private static readonly pb::MessageParser<StartGameRsp> _parser = new pb::MessageParser<StartGameRsp>(() => new StartGameRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartGameRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGameRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGameRsp(StartGameRsp other) : this() {
      ret_ = other.ret_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGameRsp Clone() {
      return new StartGameRsp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private global::Msg.ErrorID ret_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ErrorID Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartGameRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartGameRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartGameRsp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ret_ = (global::Msg.ErrorID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// bet
  /// </summary>
  public sealed partial class BetReq : pb::IMessage<BetReq> {
    private static readonly pb::MessageParser<BetReq> _parser = new pb::MessageParser<BetReq>(() => new BetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BetReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BetReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BetReq(BetReq other) : this() {
      chips_ = other.chips_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BetReq Clone() {
      return new BetReq(this);
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 1;
    private uint chips_;
    /// <summary>
    /// 筹码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Chips {
      get { return chips_; }
      set {
        chips_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BetReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BetReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chips != other.Chips) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chips != 0) hash ^= Chips.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Chips != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Chips);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chips != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Chips);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BetReq other) {
      if (other == null) {
        return;
      }
      if (other.Chips != 0) {
        Chips = other.Chips;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Chips = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BetRsp : pb::IMessage<BetRsp> {
    private static readonly pb::MessageParser<BetRsp> _parser = new pb::MessageParser<BetRsp>(() => new BetRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BetRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BetRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BetRsp(BetRsp other) : this() {
      ret_ = other.ret_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BetRsp Clone() {
      return new BetRsp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private global::Msg.ErrorID ret_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ErrorID Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BetRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BetRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BetRsp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ret_ = (global::Msg.ErrorID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BetNotify : pb::IMessage<BetNotify> {
    private static readonly pb::MessageParser<BetNotify> _parser = new pb::MessageParser<BetNotify>(() => new BetNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BetNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BetNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BetNotify(BetNotify other) : this() {
      seatId_ = other.seatId_;
      chips_ = other.chips_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BetNotify Clone() {
      return new BetNotify(this);
    }

    /// <summary>Field number for the "seat_id" field.</summary>
    public const int SeatIdFieldNumber = 1;
    private uint seatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 2;
    private uint chips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Chips {
      get { return chips_; }
      set {
        chips_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BetNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BetNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeatId != other.SeatId) return false;
      if (Chips != other.Chips) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      if (Chips != 0) hash ^= Chips.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SeatId);
      }
      if (Chips != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Chips);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeatId);
      }
      if (Chips != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Chips);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BetNotify other) {
      if (other == null) {
        return;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
      if (other.Chips != 0) {
        Chips = other.Chips;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatId = input.ReadUInt32();
            break;
          }
          case 16: {
            Chips = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// combine
  /// </summary>
  public sealed partial class CardGroup : pb::IMessage<CardGroup> {
    private static readonly pb::MessageParser<CardGroup> _parser = new pb::MessageParser<CardGroup>(() => new CardGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardGroup(CardGroup other) : this() {
      cards_ = other.cards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardGroup Clone() {
      return new CardGroup(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_cards_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> cards_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardGroup other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CombineReq : pb::IMessage<CombineReq> {
    private static readonly pb::MessageParser<CombineReq> _parser = new pb::MessageParser<CombineReq>(() => new CombineReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CombineReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombineReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombineReq(CombineReq other) : this() {
      cardGroups_ = other.cardGroups_.Clone();
      autowin_ = other.autowin_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombineReq Clone() {
      return new CombineReq(this);
    }

    /// <summary>Field number for the "card_groups" field.</summary>
    public const int CardGroupsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.CardGroup> _repeated_cardGroups_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.CardGroup.Parser);
    private readonly pbc::RepeatedField<global::Msg.CardGroup> cardGroups_ = new pbc::RepeatedField<global::Msg.CardGroup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.CardGroup> CardGroups {
      get { return cardGroups_; }
    }

    /// <summary>Field number for the "autowin" field.</summary>
    public const int AutowinFieldNumber = 2;
    private bool autowin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Autowin {
      get { return autowin_; }
      set {
        autowin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CombineReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CombineReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cardGroups_.Equals(other.cardGroups_)) return false;
      if (Autowin != other.Autowin) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cardGroups_.GetHashCode();
      if (Autowin != false) hash ^= Autowin.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cardGroups_.WriteTo(output, _repeated_cardGroups_codec);
      if (Autowin != false) {
        output.WriteRawTag(16);
        output.WriteBool(Autowin);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cardGroups_.CalculateSize(_repeated_cardGroups_codec);
      if (Autowin != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CombineReq other) {
      if (other == null) {
        return;
      }
      cardGroups_.Add(other.cardGroups_);
      if (other.Autowin != false) {
        Autowin = other.Autowin;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cardGroups_.AddEntriesFrom(input, _repeated_cardGroups_codec);
            break;
          }
          case 16: {
            Autowin = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CombineRsp : pb::IMessage<CombineRsp> {
    private static readonly pb::MessageParser<CombineRsp> _parser = new pb::MessageParser<CombineRsp>(() => new CombineRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CombineRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombineRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombineRsp(CombineRsp other) : this() {
      ret_ = other.ret_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombineRsp Clone() {
      return new CombineRsp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private global::Msg.ErrorID ret_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ErrorID Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CombineRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CombineRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CombineRsp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ret_ = (global::Msg.ErrorID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CombineNotify : pb::IMessage<CombineNotify> {
    private static readonly pb::MessageParser<CombineNotify> _parser = new pb::MessageParser<CombineNotify>(() => new CombineNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CombineNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombineNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombineNotify(CombineNotify other) : this() {
      seatId_ = other.seatId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombineNotify Clone() {
      return new CombineNotify(this);
    }

    /// <summary>Field number for the "seat_id" field.</summary>
    public const int SeatIdFieldNumber = 1;
    private uint seatId_;
    /// <summary>
    /// 完成组牌的座位号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CombineNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CombineNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeatId != other.SeatId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SeatId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeatId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CombineNotify other) {
      if (other == null) {
        return;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// result
  /// </summary>
  public sealed partial class SeatResult : pb::IMessage<SeatResult> {
    private static readonly pb::MessageParser<SeatResult> _parser = new pb::MessageParser<SeatResult>(() => new SeatResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SeatResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeatResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeatResult(SeatResult other) : this() {
      seatId_ = other.seatId_;
      cardGroups_ = other.cardGroups_.Clone();
      autowin_ = other.autowin_;
      foul_ = other.foul_;
      ranks_ = other.ranks_.Clone();
      scores_ = other.scores_.Clone();
      totalScore_ = other.totalScore_;
      win_ = other.win_;
      bet_ = other.bet_;
      uid_ = other.uid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeatResult Clone() {
      return new SeatResult(this);
    }

    /// <summary>Field number for the "seat_id" field.</summary>
    public const int SeatIdFieldNumber = 1;
    private uint seatId_;
    /// <summary>
    /// 座位号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    /// <summary>Field number for the "card_groups" field.</summary>
    public const int CardGroupsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Msg.CardGroup> _repeated_cardGroups_codec
        = pb::FieldCodec.ForMessage(18, global::Msg.CardGroup.Parser);
    private readonly pbc::RepeatedField<global::Msg.CardGroup> cardGroups_ = new pbc::RepeatedField<global::Msg.CardGroup>();
    /// <summary>
    /// 牌组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.CardGroup> CardGroups {
      get { return cardGroups_; }
    }

    /// <summary>Field number for the "autowin" field.</summary>
    public const int AutowinFieldNumber = 3;
    private bool autowin_;
    /// <summary>
    /// 是否get lucky
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Autowin {
      get { return autowin_; }
      set {
        autowin_ = value;
      }
    }

    /// <summary>Field number for the "foul" field.</summary>
    public const int FoulFieldNumber = 4;
    private bool foul_;
    /// <summary>
    /// 是否乌龙
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Foul {
      get { return foul_; }
      set {
        foul_ = value;
      }
    }

    /// <summary>Field number for the "ranks" field.</summary>
    public const int RanksFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Msg.CardRank> _repeated_ranks_codec
        = pb::FieldCodec.ForEnum(42, x => (int) x, x => (global::Msg.CardRank) x);
    private readonly pbc::RepeatedField<global::Msg.CardRank> ranks_ = new pbc::RepeatedField<global::Msg.CardRank>();
    /// <summary>
    /// 牌型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.CardRank> Ranks {
      get { return ranks_; }
    }

    /// <summary>Field number for the "scores" field.</summary>
    public const int ScoresFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_scores_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> scores_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 牌组得分,banker不用此值，banker的scores与闲家为正负关系
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Scores {
      get { return scores_; }
    }

    /// <summary>Field number for the "total_score" field.</summary>
    public const int TotalScoreFieldNumber = 7;
    private int totalScore_;
    /// <summary>
    /// 得分总和，如果是autowin赢输和或者乌龙, score字段为空
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalScore {
      get { return totalScore_; }
      set {
        totalScore_ = value;
      }
    }

    /// <summary>Field number for the "win" field.</summary>
    public const int WinFieldNumber = 8;
    private int win_;
    /// <summary>
    /// 输赢积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 9;
    private uint bet_;
    /// <summary>
    /// 下注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 10;
    private uint uid_;
    /// <summary>
    /// uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SeatResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SeatResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeatId != other.SeatId) return false;
      if(!cardGroups_.Equals(other.cardGroups_)) return false;
      if (Autowin != other.Autowin) return false;
      if (Foul != other.Foul) return false;
      if(!ranks_.Equals(other.ranks_)) return false;
      if(!scores_.Equals(other.scores_)) return false;
      if (TotalScore != other.TotalScore) return false;
      if (Win != other.Win) return false;
      if (Bet != other.Bet) return false;
      if (Uid != other.Uid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      hash ^= cardGroups_.GetHashCode();
      if (Autowin != false) hash ^= Autowin.GetHashCode();
      if (Foul != false) hash ^= Foul.GetHashCode();
      hash ^= ranks_.GetHashCode();
      hash ^= scores_.GetHashCode();
      if (TotalScore != 0) hash ^= TotalScore.GetHashCode();
      if (Win != 0) hash ^= Win.GetHashCode();
      if (Bet != 0) hash ^= Bet.GetHashCode();
      if (Uid != 0) hash ^= Uid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SeatId);
      }
      cardGroups_.WriteTo(output, _repeated_cardGroups_codec);
      if (Autowin != false) {
        output.WriteRawTag(24);
        output.WriteBool(Autowin);
      }
      if (Foul != false) {
        output.WriteRawTag(32);
        output.WriteBool(Foul);
      }
      ranks_.WriteTo(output, _repeated_ranks_codec);
      scores_.WriteTo(output, _repeated_scores_codec);
      if (TotalScore != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TotalScore);
      }
      if (Win != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Win);
      }
      if (Bet != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Bet);
      }
      if (Uid != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeatId);
      }
      size += cardGroups_.CalculateSize(_repeated_cardGroups_codec);
      if (Autowin != false) {
        size += 1 + 1;
      }
      if (Foul != false) {
        size += 1 + 1;
      }
      size += ranks_.CalculateSize(_repeated_ranks_codec);
      size += scores_.CalculateSize(_repeated_scores_codec);
      if (TotalScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalScore);
      }
      if (Win != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Win);
      }
      if (Bet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Bet);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SeatResult other) {
      if (other == null) {
        return;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
      cardGroups_.Add(other.cardGroups_);
      if (other.Autowin != false) {
        Autowin = other.Autowin;
      }
      if (other.Foul != false) {
        Foul = other.Foul;
      }
      ranks_.Add(other.ranks_);
      scores_.Add(other.scores_);
      if (other.TotalScore != 0) {
        TotalScore = other.TotalScore;
      }
      if (other.Win != 0) {
        Win = other.Win;
      }
      if (other.Bet != 0) {
        Bet = other.Bet;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatId = input.ReadUInt32();
            break;
          }
          case 18: {
            cardGroups_.AddEntriesFrom(input, _repeated_cardGroups_codec);
            break;
          }
          case 24: {
            Autowin = input.ReadBool();
            break;
          }
          case 32: {
            Foul = input.ReadBool();
            break;
          }
          case 42:
          case 40: {
            ranks_.AddEntriesFrom(input, _repeated_ranks_codec);
            break;
          }
          case 50:
          case 48: {
            scores_.AddEntriesFrom(input, _repeated_scores_codec);
            break;
          }
          case 56: {
            TotalScore = input.ReadInt32();
            break;
          }
          case 64: {
            Win = input.ReadInt32();
            break;
          }
          case 72: {
            Bet = input.ReadUInt32();
            break;
          }
          case 80: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 牌局保存到数据库
  /// </summary>
  public sealed partial class DBResults : pb::IMessage<DBResults> {
    private static readonly pb::MessageParser<DBResults> _parser = new pb::MessageParser<DBResults>(() => new DBResults());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DBResults> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBResults() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBResults(DBResults other) : this() {
      results_ = other.results_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBResults Clone() {
      return new DBResults(this);
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.SeatResult> _repeated_results_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.SeatResult.Parser);
    private readonly pbc::RepeatedField<global::Msg.SeatResult> results_ = new pbc::RepeatedField<global::Msg.SeatResult>();
    /// <summary>
    /// 结算结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.SeatResult> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DBResults);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DBResults other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!results_.Equals(other.results_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= results_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      results_.WriteTo(output, _repeated_results_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += results_.CalculateSize(_repeated_results_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DBResults other) {
      if (other == null) {
        return;
      }
      results_.Add(other.results_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerRoundHistory : pb::IMessage<PlayerRoundHistory> {
    private static readonly pb::MessageParser<PlayerRoundHistory> _parser = new pb::MessageParser<PlayerRoundHistory>(() => new PlayerRoundHistory());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerRoundHistory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRoundHistory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRoundHistory(PlayerRoundHistory other) : this() {
      uid_ = other.uid_;
      name_ = other.name_;
      avatar_ = other.avatar_;
      Result = other.result_ != null ? other.Result.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRoundHistory Clone() {
      return new PlayerRoundHistory(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 3;
    private string avatar_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 4;
    private global::Msg.SeatResult result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.SeatResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerRoundHistory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerRoundHistory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      if (Avatar != other.Avatar) return false;
      if (!object.Equals(Result, other.Result)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
      if (result_ != null) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Avatar);
      }
      if (result_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerRoundHistory other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Avatar.Length != 0) {
        Avatar = other.Avatar;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          result_ = new global::Msg.SeatResult();
        }
        Result.MergeFrom(other.Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Avatar = input.ReadString();
            break;
          }
          case 34: {
            if (result_ == null) {
              result_ = new global::Msg.SeatResult();
            }
            input.ReadMessage(result_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取当前房间的某局回顾
  /// </summary>
  public sealed partial class GetRoundHistoryReq : pb::IMessage<GetRoundHistoryReq> {
    private static readonly pb::MessageParser<GetRoundHistoryReq> _parser = new pb::MessageParser<GetRoundHistoryReq>(() => new GetRoundHistoryReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRoundHistoryReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoundHistoryReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoundHistoryReq(GetRoundHistoryReq other) : this() {
      round_ = other.round_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoundHistoryReq Clone() {
      return new GetRoundHistoryReq(this);
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 1;
    private uint round_;
    /// <summary>
    /// 第几局，从0开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRoundHistoryReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRoundHistoryReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Round != other.Round) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Round != 0) hash ^= Round.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Round != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Round);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Round);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRoundHistoryReq other) {
      if (other == null) {
        return;
      }
      if (other.Round != 0) {
        Round = other.Round;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Round = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRoundHistoryRsp : pb::IMessage<GetRoundHistoryRsp> {
    private static readonly pb::MessageParser<GetRoundHistoryRsp> _parser = new pb::MessageParser<GetRoundHistoryRsp>(() => new GetRoundHistoryRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRoundHistoryRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoundHistoryRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoundHistoryRsp(GetRoundHistoryRsp other) : this() {
      ret_ = other.ret_;
      results_ = other.results_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoundHistoryRsp Clone() {
      return new GetRoundHistoryRsp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private global::Msg.ErrorID ret_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ErrorID Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Msg.PlayerRoundHistory> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Msg.PlayerRoundHistory.Parser);
    private readonly pbc::RepeatedField<global::Msg.PlayerRoundHistory> results_ = new pbc::RepeatedField<global::Msg.PlayerRoundHistory>();
    /// <summary>
    /// 结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.PlayerRoundHistory> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRoundHistoryRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRoundHistoryRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!results_.Equals(other.results_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= results_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Ret);
      }
      results_.WriteTo(output, _repeated_results_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ret);
      }
      size += results_.CalculateSize(_repeated_results_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRoundHistoryRsp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      results_.Add(other.results_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ret_ = (global::Msg.ErrorID) input.ReadEnum();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameStateNotify : pb::IMessage<GameStateNotify> {
    private static readonly pb::MessageParser<GameStateNotify> _parser = new pb::MessageParser<GameStateNotify>(() => new GameStateNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameStateNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStateNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStateNotify(GameStateNotify other) : this() {
      state_ = other.state_;
      countdown_ = other.countdown_;
      dealCards_ = other.dealCards_.Clone();
      dealSeats_ = other.dealSeats_.Clone();
      result_ = other.result_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStateNotify Clone() {
      return new GameStateNotify(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Msg.GameState state_ = 0;
    /// <summary>
    /// 状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.GameState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "countdown" field.</summary>
    public const int CountdownFieldNumber = 2;
    private uint countdown_;
    /// <summary>
    /// 状态时间 ms, 0-表示无倒计时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Countdown {
      get { return countdown_; }
      set {
        countdown_ = value;
      }
    }

    /// <summary>Field number for the "deal_cards" field.</summary>
    public const int DealCardsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_dealCards_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> dealCards_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 发牌阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DealCards {
      get { return dealCards_; }
    }

    /// <summary>Field number for the "deal_seats" field.</summary>
    public const int DealSeatsFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_dealSeats_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> dealSeats_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 发牌的座位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DealSeats {
      get { return dealSeats_; }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Msg.SeatResult> _repeated_result_codec
        = pb::FieldCodec.ForMessage(42, global::Msg.SeatResult.Parser);
    private readonly pbc::RepeatedField<global::Msg.SeatResult> result_ = new pbc::RepeatedField<global::Msg.SeatResult>();
    /// <summary>
    /// 结算结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.SeatResult> Result {
      get { return result_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameStateNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameStateNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (Countdown != other.Countdown) return false;
      if(!dealCards_.Equals(other.dealCards_)) return false;
      if(!dealSeats_.Equals(other.dealSeats_)) return false;
      if(!result_.Equals(other.result_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      if (Countdown != 0) hash ^= Countdown.GetHashCode();
      hash ^= dealCards_.GetHashCode();
      hash ^= dealSeats_.GetHashCode();
      hash ^= result_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (Countdown != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Countdown);
      }
      dealCards_.WriteTo(output, _repeated_dealCards_codec);
      dealSeats_.WriteTo(output, _repeated_dealSeats_codec);
      result_.WriteTo(output, _repeated_result_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (Countdown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Countdown);
      }
      size += dealCards_.CalculateSize(_repeated_dealCards_codec);
      size += dealSeats_.CalculateSize(_repeated_dealSeats_codec);
      size += result_.CalculateSize(_repeated_result_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameStateNotify other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Countdown != 0) {
        Countdown = other.Countdown;
      }
      dealCards_.Add(other.dealCards_);
      dealSeats_.Add(other.dealSeats_);
      result_.Add(other.result_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state_ = (global::Msg.GameState) input.ReadEnum();
            break;
          }
          case 16: {
            Countdown = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            dealCards_.AddEntriesFrom(input, _repeated_dealCards_codec);
            break;
          }
          case 34:
          case 32: {
            dealSeats_.AddEntriesFrom(input, _repeated_dealSeats_codec);
            break;
          }
          case 42: {
            result_.AddEntriesFrom(input, _repeated_result_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 积分榜
  /// </summary>
  public sealed partial class GetScoreboardReq : pb::IMessage<GetScoreboardReq> {
    private static readonly pb::MessageParser<GetScoreboardReq> _parser = new pb::MessageParser<GetScoreboardReq>(() => new GetScoreboardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetScoreboardReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetScoreboardReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetScoreboardReq(GetScoreboardReq other) : this() {
      pos_ = other.pos_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetScoreboardReq Clone() {
      return new GetScoreboardReq(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private uint pos_;
    /// <summary>
    /// 积分榜起始位置, 最大条数配置在服务端配置文件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetScoreboardReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetScoreboardReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pos != other.Pos) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pos != 0) hash ^= Pos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetScoreboardReq other) {
      if (other == null) {
        return;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Pos = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScoreboardItem : pb::IMessage<ScoreboardItem> {
    private static readonly pb::MessageParser<ScoreboardItem> _parser = new pb::MessageParser<ScoreboardItem>(() => new ScoreboardItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScoreboardItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreboardItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreboardItem(ScoreboardItem other) : this() {
      uid_ = other.uid_;
      name_ = other.name_;
      avatar_ = other.avatar_;
      score_ = other.score_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreboardItem Clone() {
      return new ScoreboardItem(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    /// uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 3;
    private string avatar_ = "";
    /// <summary>
    /// 头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 4;
    private int score_;
    /// <summary>
    /// 积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScoreboardItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScoreboardItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      if (Avatar != other.Avatar) return false;
      if (Score != other.Score) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Avatar);
      }
      if (Score != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScoreboardItem other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Avatar.Length != 0) {
        Avatar = other.Avatar;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Avatar = input.ReadString();
            break;
          }
          case 32: {
            Score = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetScoreboardRsp : pb::IMessage<GetScoreboardRsp> {
    private static readonly pb::MessageParser<GetScoreboardRsp> _parser = new pb::MessageParser<GetScoreboardRsp>(() => new GetScoreboardRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetScoreboardRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetScoreboardRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetScoreboardRsp(GetScoreboardRsp other) : this() {
      ret_ = other.ret_;
      total_ = other.total_;
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetScoreboardRsp Clone() {
      return new GetScoreboardRsp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private global::Msg.ErrorID ret_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ErrorID Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 2;
    private uint total_;
    /// <summary>
    /// 积分榜总个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Msg.ScoreboardItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(26, global::Msg.ScoreboardItem.Parser);
    private readonly pbc::RepeatedField<global::Msg.ScoreboardItem> items_ = new pbc::RepeatedField<global::Msg.ScoreboardItem>();
    /// <summary>
    /// 当前起始位置开始的积分榜项
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ScoreboardItem> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetScoreboardRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetScoreboardRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Total != other.Total) return false;
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Total != 0) hash ^= Total.GetHashCode();
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Ret);
      }
      if (Total != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Total);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ret);
      }
      if (Total != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Total);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetScoreboardRsp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Total != 0) {
        Total = other.Total;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ret_ = (global::Msg.ErrorID) input.ReadEnum();
            break;
          }
          case 16: {
            Total = input.ReadUInt32();
            break;
          }
          case 26: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
